import SwiftUI

struct CarPlateView: View {
    @State private var plateNumber: String = ""
    @State private var result: (th: String, en: String)? = nil
    @EnvironmentObject var language: AppLanguage
    
    var body: some View {
        ZStack {
            // MARK: - 1. ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏•‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏µ
            LinearGradient(
                colors: [Color.blue.opacity(0.2), .clear],
                startPoint: .top,
                endPoint: .bottom
            )
            .ignoresSafeArea()
            
            VStack(spacing: 24) {
                // MARK: - 2. Header
                VStack {
                    HStack {
                        BackButton()
                    }
                    Text("üöó " + language.localized("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ", "Car Plate Fortune"))
                        .font(.title).bold()
                        .multilineTextAlignment(.center)
                        .foregroundStyle(Color.blue.gradient)
                }
                
                // MARK: - 3. ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
                VStack {
                    TextField(language.localized("‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "Enter plate numbers only"), text: $plateNumber)
                        .font(.system(size: 28, weight: .bold, design: .monospaced))
                        .multilineTextAlignment(.center)
                        .keyboardType(.numberPad)
                        .padding()
                        .background(.ultraThinMaterial)
                        .clipShape(RoundedRectangle(cornerRadius: 20, style: .continuous))
                        .shadow(color: .black.opacity(0.1), radius: 5, y: 3)
                    
                    Text(language.localized("‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô 1‡∏Å‡∏Ç 9872 ‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡πÅ‡∏Ñ‡πà 9872", "e.g., for plate 1AB 9872, enter only 9872"))
                        .font(.caption)
                        .foregroundStyle(.secondary)
                }
                
                // MARK: - 4. ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
                Button(action: {
                    // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î
                    hideKeyboard()
                    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏£‡∏ß‡∏°
                    let sum = calculatePlateSum(plateNumber)
                    // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
                    result = getPrediction(for: sum)
                }) {
                    Label(language.localized("‡∏î‡∏π‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", "Predict"), systemImage: "sparkles")
                        .fontWeight(.bold)
                        .foregroundColor(.white)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.blue.gradient)
                        .cornerRadius(20)
                        .shadow(color: .blue.opacity(0.4), radius: 8, y: 4)
                }
                .disabled(plateNumber.isEmpty) // ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏Å
                
                // MARK: - 5. ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                if let prediction = result {
                    VStack(alignment: .leading, spacing: 10) {
                        Label(language.localized("‡∏ú‡∏•‡∏£‡∏ß‡∏°: \(calculatePlateSum(plateNumber))", "Sum: \(calculatePlateSum(plateNumber))"), systemImage: "sum")
                            .font(.headline)
                            .foregroundStyle(.blue)
                        
                        Divider()
                        
                        Text(language.localized(prediction.th, prediction.en))
                            .font(.body)
                    }
                    .padding()
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .background(.ultraThinMaterial)
                    .clipShape(RoundedRectangle(cornerRadius: 20, style: .continuous))
                    .transition(.opacity.combined(with: .scale(scale: 0.9)))
                }
                
                Spacer()
            }
            .padding()
        }
    }
    
    // MARK: - Functions
    
    private func calculatePlateSum(_ plate: String) -> Int {
        let digits = plate.compactMap { Int(String($0)) }
        guard !digits.isEmpty else { return 0 }
        
        let total = digits.reduce(0, +)
        // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏î‡∏µ‡∏¢‡∏ß (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        // while total > 9 {
        //     total = String(total).compactMap { Int(String($0)) }.reduce(0, +)
        // }
        return total
    }
    
    private func getPrediction(for sum: Int) -> (th: String, en: String) {
        // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        switch sum {
        case 1...9:
            return ("‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡∏ö‡∏≤‡∏£‡∏°‡∏µ", "Excellent sum, enhances prestige and power.")
        case 10...19:
            return ("‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÅ‡∏Ñ‡∏•‡πâ‡∏ß‡∏Ñ‡∏•‡∏≤‡∏î‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢", "Promotes safe travels.")
        case 20...29:
            return ("‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏°‡∏ï‡∏ï‡∏≤‡∏°‡∏´‡∏≤‡∏ô‡∏¥‡∏¢‡∏° ‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡∏≠‡∏¢‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠", "Enhances charm and attracts helpful people.")
        case 30...39:
            return ("‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏†‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô", "Boosts business and financial luck.")
        default:
            return ("‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡∏°‡∏µ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ö‡∏ß‡∏Å‡∏≠‡∏¢‡∏π‡πà‡∏£‡∏≠‡∏ö‡∏ï‡∏±‡∏ß", "A good number, surrounded by positive energy.")
        }
    }
    
    private func hideKeyboard() {
        UIApplication.shared.sendAction(#selector(UIResponder.resignFirstResponder), to: nil, from: nil, for: nil)
    }
}
