import Foundation

// Struct ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
struct NILR_Score: Identifiable {
    let id: UUID
    let place: SacredPlace
    let score: Double
}

class NILR_Recommender {
    
    private let members: [Member]
    private let places: [SacredPlace]
    private let activities: [ActivityRecord]
    
    // Map ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á index ‡∏Ç‡∏≠‡∏á place ‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô
    private var placeIndexMap: [UUID: Int] = [:]
    
    init(members: [Member], places: [SacredPlace], activities: [ActivityRecord]) {
        self.members = members
        self.places = places
        self.activities = activities
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏ï‡∏≠‡∏ô init
        for (index, place) in places.enumerated() {
            placeIndexMap[place.id] = index
        }
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ISF, ISP (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
    func calculateISFAndISP() -> (isf: [NILR_Score], isp: [NILR_Score]) {
        let interactionMatrix = createInteractionMatrix()
        let isfScores = calculateISF(matrix: interactionMatrix)
        let ispScores = calculateISP(matrix: interactionMatrix)
        return (isf: isfScores, isp: ispScores)
    }
    
    // --- üëá [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IL Ranking ---
    /// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö IL ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Pairwise Ranking Algorithm ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ISF ‡πÅ‡∏•‡∏∞ ISP
    /// - Parameters:
    ///   - isfScores: Array ‡∏Ç‡∏≠‡∏á NILR_Score ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ISF (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)
    ///   - ispScores: Array ‡∏Ç‡∏≠‡∏á NILR_Score ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° ISP (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÑ‡∏õ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î)
    /// - Returns: Array ‡∏Ç‡∏≠‡∏á SacredPlace ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° IL
    func calculateILRanking(isfScores: [NILR_Score], ispScores: [NILR_Score]) -> [SacredPlace] {
        guard !places.isEmpty else { return [] }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Dictionary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢ O(1)
        // [PlaceID: Score]
        let isfScoreMap = Dictionary(uniqueKeysWithValues: isfScores.map { ($0.id, $0.score) })
        let ispScoreMap = Dictionary(uniqueKeysWithValues: ispScores.map { ($0.id, $0.score) })
        
        var orderedPlaces: [SacredPlace] = []
        var remainingPlaceIDs = Set(places.map { $0.id }) // ‡πÉ‡∏ä‡πâ Set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡πÄ‡∏£‡πá‡∏ß O(1)
        
        // ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        while !remainingPlaceIDs.isEmpty {
            // ‡∏´‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏•‡∏¥‡∏™‡∏ï‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
            // ‡πÉ‡∏ä‡πâ max(by:) ‡∏Å‡∏±‡∏ö remainingPlaceIDs ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
            let topISF_ID = remainingPlaceIDs.max { (id1, id2) -> Bool in
                (isfScoreMap[id1] ?? -Double.infinity) < (isfScoreMap[id2] ?? -Double.infinity)
            }
            let topISP_ID = remainingPlaceIDs.max { (id1, id2) -> Bool in
                (ispScoreMap[id1] ?? -Double.infinity) < (ispScoreMap[id2] ?? -Double.infinity)
            }
            
            guard let aID = topISF_ID, let bID = topISP_ID else {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤ remainingPlaceIDs ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á
                print("‚ö†Ô∏è Error finding top ISF/ISP ID, breaking loop.")
                break
            }
            
            // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß top
            let scoreA_ISF = isfScoreMap[aID] ?? -Double.infinity
            let scoreB_ISP = ispScoreMap[bID] ?? -Double.infinity
            
            if aID == bID {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á ISF ‡πÅ‡∏•‡∏∞ ISP
                if let place = places.first(where: { $0.id == aID }) {
                    orderedPlaces.append(place)
                }
                remainingPlaceIDs.remove(aID)
            } else {
                // ‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
                let placeA = places.first { $0.id == aID }
                let placeB = places.first { $0.id == bID }
                
                guard let pA = placeA, let pB = placeB else {
                    print("‚ö†Ô∏è Error finding place objects for IDs \(aID) or \(bID), skipping.")
                    // ‡∏•‡∏ö ID ‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ß‡∏ô‡∏ã‡πâ‡∏≥
                    remainingPlaceIDs.remove(aID)
                    remainingPlaceIDs.remove(bID)
                    continue
                }
                
                if scoreA_ISF >= scoreB_ISP {
                    // ‡∏ñ‡πâ‡∏≤ ISF ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö ISP -> ‡πÄ‡∏≠‡∏≤ A ‡∏Å‡πà‡∏≠‡∏ô B
                    orderedPlaces.append(pA)
                    orderedPlaces.append(pB)
                } else {
                    // ‡∏ñ‡πâ‡∏≤ ISP ‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤ ISF -> ‡πÄ‡∏≠‡∏≤ B ‡∏Å‡πà‡∏≠‡∏ô A
                    orderedPlaces.append(pB)
                    orderedPlaces.append(pA)
                }
                // ‡∏•‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ñ‡∏π‡πà‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Set
                remainingPlaceIDs.remove(aID)
                remainingPlaceIDs.remove(bID)
            }
        }
        
        return orderedPlaces
    }
    // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô IL Ranking ---
    
    
    // (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createInteractionMatrix, calculateISF, calculateISP, ‡πÅ‡∏•‡∏∞ helpers ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    // ... [‡πÉ‡∏™‡πà‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà] ...
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏ó‡∏£‡∏¥‡∏Å‡∏ã‡πå‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (1 ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏¢‡πÑ‡∏õ, 0 ‡∏Ñ‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢)
    private func createInteractionMatrix() -> [[Double]] {
        var matrix = Array(repeating: Array(repeating: 0.0, count: places.count), count: members.count)
        
        for (userIndex, member) in members.enumerated() {
            for (placeIndex, place) in places.enumerated() {
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ user ‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢ check-in ‡∏ó‡∏µ‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                let hasCheckedIn = activities.contains {
                    $0.memberEmail.lowercased() == member.email.lowercased() &&
                    $0.placeID == place.id.uuidString &&
                    $0.type == .checkIn
                }
                if hasCheckedIn {
                    matrix[userIndex][placeIndex] = 1.0
                }
            }
        }
        return matrix
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ISF (Iterative Scoring Function - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà)
    private func calculateISF(matrix: [[Double]]) -> [NILR_Score] {
        guard !members.isEmpty, !places.isEmpty else { return [] }
        
        var userScores = Array(repeating: 1.0, count: members.count)
        var locationScores = Array(repeating: 0.0, count: places.count)
        
        for _ in 0..<3 { // ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥ 3 ‡∏£‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå Python
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà: l_score = u_score ‚Ä¢ R
            locationScores = dot(vector: userScores, matrix: matrix)
            
            // Normalize ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
            let normL = normalize(vector: locationScores)
            
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: u_score = R ‚Ä¢ l_score
            userScores = dot(matrix: matrix, vector: normL)
            
            // Normalize ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
            userScores = normalize(vector: userScores)
        }
        
        // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        let finalScores = normalize(vector: locationScores)
        var results: [NILR_Score] = []
        for (index, place) in places.enumerated() {
            results.append(NILR_Score(id: place.id, place: place, score: finalScores[index]))
        }
        
        return results.sorted { $0.score > $1.score }
    }
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì ISP (Iterative Scoring Preference - ‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö/‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ã‡πâ‡∏≥)
    private func calculateISP(matrix: [[Double]]) -> [NILR_Score] {
        guard !members.isEmpty, !places.isEmpty else { return [] }
        
        // prefU: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏õ‡∏ã‡πâ‡∏≥)
        let prefU = members.map { member in
            Double(Set(activities.filter { $0.memberEmail.lowercased() == member.email.lowercased() && $0.type == .checkIn }.map { $0.placeID }).count)
        }
        
        // prefL: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏ã‡πâ‡∏≥)
        let prefL = places.map { place in
            Double(Set(activities.filter { $0.placeID == place.id.uuidString && $0.type == .checkIn }.map { $0.memberEmail }).count)
        }
        
        var userScores = Array(repeating: 1.0, count: members.count)
        var locationScores = Array(repeating: 0.0, count: places.count)
        
        for _ in 0..<3 {
            let weightedUserScores = zip(userScores, prefU).map(*)
            locationScores = dot(vector: Array(weightedUserScores), matrix: matrix)
            let normL = normalize(vector: locationScores)
            
            let weightedLocationScores = zip(normL, prefL).map(*)
            userScores = dot(matrix: matrix, vector: Array(weightedLocationScores))
            userScores = normalize(vector: userScores)
        }
        
        let finalScores = normalize(vector: locationScores)
        var results: [NILR_Score] = []
        for (index, place) in places.enumerated() {
            results.append(NILR_Score(id: place.id, place: place, score: finalScores[index]))
        }
        
        return results.sorted { $0.score > $1.score }
    }
    
    // --- Helper functions for matrix multiplication ---
    private func dot(vector: [Double], matrix: [[Double]]) -> [Double] {
        guard !matrix.isEmpty, !vector.isEmpty, matrix.count == vector.count else { return [] }
        var result = Array(repeating: 0.0, count: matrix[0].count)
        for j in 0..<matrix[0].count {
            for i in 0..<vector.count {
                result[j] += vector[i] * matrix[i][j]
            }
        }
        return result
    }
    
    private func dot(matrix: [[Double]], vector: [Double]) -> [Double] {
        guard !matrix.isEmpty, !vector.isEmpty, matrix[0].count == vector.count else { return [] }
        var result = Array(repeating: 0.0, count: matrix.count)
        for i in 0..<matrix.count {
            for j in 0..<vector.count {
                result[i] += matrix[i][j] * vector[j]
            }
        }
        return result
    }
    
    private func normalize(vector: [Double]) -> [Double] {
        let norm = sqrt(vector.map { $0 * $0 }.reduce(0, +))
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö norm > 0 ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏®‡∏π‡∏ô‡∏¢‡πå
        return norm > 1e-9 ? vector.map { $0 / norm } : vector
    }
}
