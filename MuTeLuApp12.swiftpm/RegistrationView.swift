import SwiftUI
import CryptoKit

struct RegistrationView: View {
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    @EnvironmentObject var memberStore: MemberStore
    @State private var showConfirmAlert = false
    @State private var showAlert = false
    @State private var alertMessage = ""
    
    @State private var email = ""
    @State private var password = ""
    @State private var confirmPassword = ""
    @State private var fullName = ""
    @State private var gender = "‡∏ä‡∏≤‡∏¢"
    @State private var birthdate = Date()
    @State private var birthTime = ""
    @State private var phoneNumber = ""
    @State private var houseNumber = ""
    @State private var carPlate = ""
    
    @State private var activeAlert: AppAlert?
    
    let genderOptions = ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
    
    // MARK: - ‡πÇ‡∏Ñ‡πâ‡∏î‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö RegistrationView.swift
    
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                // --- 1. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Header ‡πÅ‡∏•‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á ---
                Text(language.localized("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "Register"))
                    .font(.largeTitle.bold()) // üëà ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                    .foregroundColor(AppColor.textPrimary.color)
                    .padding(.top)
                
                // --- 2. ‡πÉ‡∏ä‡πâ Component ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß ---
                // ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á View ‡∏¢‡πà‡∏≠‡∏¢‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà
                RequiredField(title: language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", "Email"), text: $email)
                RequiredPasswordField(title: language.localized("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "Password"), text: $password)
                RequiredPasswordField(title: language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "Confirm Password"), text: $confirmPassword)
                
                Divider().padding(.vertical)
                
                Text(language.localized("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)", "Optional Information"))
                    .font(.headline)
                    .foregroundColor(AppColor.textSecondary.color) // üëà ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏£‡∏≠‡∏á
                    .padding(.top, 5)
                
                InputField(title: language.localized("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "Full Name"), text: $fullName)
                genderPicker
                
                DatePicker(language.localized("‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î", "Birthdate"), selection: $birthdate, displayedComponents: .date)
                    .environment(\.locale, Locale(identifier: language.currentLanguage == "th" ? "th_TH" : "en_US"))
                    .environment(\.calendar, Calendar(identifier: language.currentLanguage == "th" ? .buddhist : .gregorian))
                    .tint(AppColor.brandPrimary.color) // üëà ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á DatePicker
                    .padding(.horizontal)
                
                InputField(title: language.localized("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î", "Birth Time"), text: $birthTime)
                InputField(title: language.localized("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "Phone Number"), text: $phoneNumber)
                InputField(title: language.localized("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô", "House Number"), text: $houseNumber)
                InputField(title: language.localized("‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ", "Car Plate"), text: $carPlate)
                
                // --- 3. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏≠‡∏á ---
                Button(action: {
                    showConfirmAlert = true
                }) {
                    Text(language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "Confirm Registration"))
                        .bold()
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(AppColor.brandPrimary.color) // üëà ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
                        .foregroundColor(.white)
                        .cornerRadius(12) // üëà ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏°‡∏∏‡∏°‡∏°‡∏ô‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
                }
                .padding(.horizontal)
                .confirmationDialog(
                    language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "Confirm Registration"),
                    isPresented: $showConfirmAlert,
                    titleVisibility: .visible
                ) {
                    Button(language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "Confirm")) { handleRegister() }
                    Button(language.localized("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "Cancel"), role: .cancel) { }
                }
                
                Button(action: {
                    flowManager.isLoggedIn = false
                    flowManager.currentScreen = .login
                }) {
                    Text(language.localized("‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "Back to Login"))
                        .font(.footnote)
                        .foregroundColor(AppColor.brandPrimary.color) // üëà ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏´‡∏•‡∏±‡∏Å
                        .underline()
                }
            }
            .padding()
        }
        .background(AppColor.backgroundPrimary.color) // üëà ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏´‡∏•‡∏±‡∏Å
        .alert(isPresented: $showAlert) {
            Alert(title: Text(language.localized("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "Error")),
                  message: Text(alertMessage),
                  dismissButton: .default(Text(language.localized("‡∏ï‡∏Å‡∏•‡∏á", "OK"))))
        }
    }
    
    // MARK: - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á View ‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡πÉ‡∏´‡∏°‡πà
    
    // ‚úÖ Field ‡∏õ‡∏Å‡∏ï‡∏¥
    struct InputField: View {
        var title: String
        @Binding var text: String
        
        var body: some View {
            HStack(alignment: .center) {
                Text(title)
                    .font(.subheadline)
                    .foregroundColor(AppColor.textSecondary.color) // üëà
                    .frame(width: 110, alignment: .leading)
                
                TextField(title, text: $text)
                    .textFieldStyle(.roundedBorder)
                    .tint(AppColor.brandPrimary.color) // üëà
            }
            .padding(.horizontal)
        }
    }
    
    // ‚úÖ Field ‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏°‡∏µ‡∏î‡∏≠‡∏Å‡∏à‡∏±‡∏ô‡∏™‡∏µ‡πÅ‡∏î‡∏á)
    struct RequiredField: View {
        var title: String
        @Binding var text: String
        
        var body: some View {
            HStack(alignment: .center) {
                HStack(spacing: 2) {
                    Text(title)
                        .font(.subheadline)
                        .foregroundColor(AppColor.textSecondary.color) // üëà
                    Text("*")
                        .foregroundColor(.red)
                }
                .frame(width: 110, alignment: .leading)
                
                TextField(title, text: $text)
                    .textFieldStyle(.roundedBorder)
                    .tint(AppColor.brandPrimary.color) // üëà
            }
            .padding(.horizontal)
        }
    }
    
    // üëá --- **‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç** ---
    var genderPicker: some View {
        VStack(alignment: .leading) {
            Text(language.localized("‡πÄ‡∏û‡∏®", "Gender")).font(.caption).foregroundColor(.gray)
            Picker("", selection: $gender) {
                ForEach(genderOptions, id: \.self) { option in
                    Text(localizedGender(option)).tag(option)
                }
            }
            .pickerStyle(.segmented)
        }
        .padding(.horizontal)
    }
    
    // üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏†‡∏≤‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏®
    private func localizedGender(_ key: String) -> String {
        switch key {
        case "‡∏ä‡∏≤‡∏¢": return language.localized("‡∏ä‡∏≤‡∏¢", "Male")
        case "‡∏´‡∏ç‡∏¥‡∏á": return language.localized("‡∏´‡∏ç‡∏¥‡∏á", "Female")
        case "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": return language.localized("‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "Other")
        default: return key
        }
    }
    // --------------------------
    
    func handleRegister() {
        let trimmedEmail = email.trimmingCharacters(in: .whitespacesAndNewlines)
        let trimmedPassword = password.trimmingCharacters(in: .whitespacesAndNewlines)
        
        guard !trimmedEmail.isEmpty && !trimmedPassword.isEmpty && !confirmPassword.isEmpty else {
            alertMessage = language.localized("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", "Please fill in all required fields")
            showAlert = true
            return
        }
        
        guard isValidEmail(trimmedEmail) else {
            alertMessage = language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "Invalid email format")
            showAlert = true
            return
        }
        
        guard trimmedPassword == confirmPassword else {
            alertMessage = language.localized("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", "Passwords do not match")
            showAlert = true
            return
        }
        
        if memberStore.members.contains(where: { $0.email.lowercased() == trimmedEmail.lowercased() }) {
            alertMessage = language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß", "This email is already registered")
            showAlert = true
            return
        }
        
        let newMember = Member(
            email: trimmedEmail,
            password: hashPassword(trimmedPassword),
            fullName: fullName,
            gender: gender,
            birthdate: birthdate,
            birthTime: birthTime,
            phoneNumber: phoneNumber,
            houseNumber: houseNumber,
            carPlate: carPlate
        )
        
        memberStore.members.append(newMember)
        
        flowManager.loggedInEmail = trimmedEmail
        flowManager.isLoggedIn = false
        flowManager.currentScreen = .login
    }
    
    func isValidEmail(_ email: String) -> Bool {
        let regex = "[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}"
        return NSPredicate(format: "SELF MATCHES %@", regex).evaluate(with: email)
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô (‡πÉ‡∏ä‡πâ SHA256)
    private func hashPassword(_ password: String) -> String {
        let data = Data(password.utf8)
        let hashed = SHA256.hash(data: data)
        return hashed.compactMap { String(format: "%02x", $0) }.joined()
    }
} // <-- ‡∏õ‡∏¥‡∏î‡∏õ‡∏µ‡∏Å‡∏Å‡∏≤‡∏Ç‡∏≠‡∏á RegistrationView

// ‚úÖ Field ‡∏õ‡∏Å‡∏ï‡∏¥ (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
struct InputField: View {
    var title: String
    @Binding var text: String
    
    var body: some View {
        HStack(alignment: .center) {
            Text(title)
                .font(.subheadline)
                .foregroundColor(AppColor.textSecondary.color)
                .frame(width: 110, alignment: .leading)
            
            TextField(title, text: $text)
                .textFieldStyle(PlainTextFieldStyle())
                .padding(10)
                .background(AppColor.backgroundSecondary.color)
                .cornerRadius(8)
                .tint(AppColor.brandPrimary.color)
        }
        .padding(.horizontal)
    }
}

// ‚úÖ Field ‡πÅ‡∏ö‡∏ö‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
struct RequiredField: View {
    var title: String
    @Binding var text: String
    
    var body: some View {
        HStack(alignment: .center) {
            HStack(spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .foregroundColor(AppColor.textSecondary.color)
                Text("*")
                    .foregroundColor(.red)
            }
            .frame(width: 110, alignment: .leading)
            
            TextField(title, text: $text)
                .textFieldStyle(PlainTextFieldStyle())
                .padding(10)
                .background(AppColor.backgroundSecondary.color)
                .cornerRadius(8)
                .tint(AppColor.brandPrimary.color)
        }
        .padding(.horizontal)
    }
}

// ‚úÖ Password Field (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß)
struct RequiredPasswordField: View {
    var title: String
    @Binding var text: String
    @State private var showPassword: Bool = false
    
    var body: some View {
        HStack(alignment: .center) {
            HStack(spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .foregroundColor(AppColor.textSecondary.color)
                Text("*")
                    .foregroundColor(.red)
            }
            .frame(width: 110, alignment: .leading)
            
            HStack {
                if showPassword {
                    TextField(title, text: $text)
                        .autocapitalization(.none)
                        .disableAutocorrection(true)
                        .textContentType(.oneTimeCode)
                } else {
                    SecureField(title, text: $text)
                        .textContentType(.oneTimeCode)
                        .autocapitalization(.none)
                        .disableAutocorrection(true)
                }
                
                Button(action: { showPassword.toggle() }) {
                    Image(systemName: showPassword ? "eye.slash" : "eye")
                        .foregroundColor(AppColor.textSecondary.color)
                }
            }
            .textFieldStyle(PlainTextFieldStyle())
            .padding(10)
            .background(AppColor.backgroundSecondary.color)
            .cornerRadius(8)
            .tint(AppColor.brandPrimary.color)
        }
        .padding(.horizontal)
    }
}


struct AppAlert: Identifiable {
    let id = UUID()
    let title: String
    let message: String
    let confirmAction: (() -> Void)?
}
