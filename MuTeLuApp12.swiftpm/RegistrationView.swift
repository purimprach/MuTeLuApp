import SwiftUI
import CryptoKit

struct RegistrationView: View {
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    @EnvironmentObject var memberStore: MemberStore
    @State private var showConfirmAlert = false
    @State private var showAlert = false
    @State private var alertMessage = ""
    @AppStorage("loggedInEmail") private var loggedInEmail: String = ""
    
    // State properties (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    @State private var email = ""
    @State private var password = ""
    @State private var confirmPassword = ""
    @State private var fullName = ""
    @State private var gender = "‡∏ä‡∏≤‡∏¢"
    @State private var birthdate = Date()
    @State private var birthTime = ""
    @State private var phoneNumber = ""
    @State private var houseNumber = ""
    @State private var carPlate = ""
    
    // @State private var activeAlert: AppAlert? // Keep if used elsewhere
    
    let genderOptions = ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"]
    
    // MARK: - Body (UI ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏´‡πâ‡∏°‡∏≤)
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                // Header (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                Text(language.localized("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "Register"))
                    .font(.largeTitle.bold())
                    .foregroundColor(AppColor.textPrimary.color)
                    .padding(.top)
                
                // Required Fields (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                RequiredField(title: language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", "Email"), text: $email)
                    .keyboardType(.emailAddress)
                    .textInputAutocapitalization(.never)
                RequiredPasswordField(title: language.localized("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "Password"), text: $password)
                RequiredPasswordField(title: language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "Confirm Password"), text: $confirmPassword)
                
                Divider().padding(.vertical)
                
                // Optional Fields Title (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                Text(language.localized("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)", "Optional Information"))
                    .font(.headline)
                    .foregroundColor(AppColor.textSecondary.color)
                    .padding(.top, 5)
                
                // Optional Fields (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                InputField(title: language.localized("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "Full Name"), text: $fullName)
                genderPicker
                DatePicker(language.localized("‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î", "Birthdate"), selection: $birthdate, displayedComponents: .date)
                    .environment(\.locale, Locale(identifier: language.currentLanguage == "th" ? "th_TH" : "en_US"))
                    .environment(\.calendar, Calendar(identifier: language.currentLanguage == "th" ? .buddhist : .gregorian))
                    .tint(AppColor.brandPrimary.color)
                    .padding(.horizontal)
                InputField(title: language.localized("‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Å‡∏¥‡∏î", "Birth Time"), text: $birthTime)
                InputField(title: language.localized("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "Phone Number"), text: $phoneNumber)
                    .keyboardType(.phonePad)
                InputField(title: language.localized("‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô", "House Number"), text: $houseNumber)
                InputField(title: language.localized("‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏ñ", "Car Plate"), text: $carPlate)
                
                // Confirm Button (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                Button(action: {
                    showConfirmAlert = true
                }) {
                    Text(language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "Confirm Registration"))
                        .bold()
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(AppColor.brandPrimary.color)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                }
                .padding(.horizontal)
                .confirmationDialog(
                    language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô", "Confirm Registration"),
                    isPresented: $showConfirmAlert,
                    titleVisibility: .visible
                ) {
                    Button(language.localized("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô", "Confirm")) {
                        handleRegister() // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å handleRegister ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                    }
                    Button(language.localized("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "Cancel"), role: .cancel) { }
                }
                
                // Back to Login Button
                Button(action: {
                    // --- üëá ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2 ---
                    flowManager.navigateTo(.login) // ‡πÉ‡∏ä‡πâ navigateTo
                    // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                }) {
                    Text(language.localized("‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "Back to Login"))
                        .font(.footnote)
                        .foregroundColor(AppColor.brandPrimary.color)
                        .underline()
                }
            }
            .padding()
        }
        .background(AppColor.backgroundPrimary.color.ignoresSafeArea()) // Apply background and ignore safe area
        .alert(isPresented: $showAlert) { // Error Alert (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            Alert(title: Text(language.localized("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "Error")),
                  message: Text(alertMessage),
                  dismissButton: .default(Text(language.localized("‡∏ï‡∏Å‡∏•‡∏á", "OK"))))
        }
    }
    
    // MARK: - Subviews (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    
    var genderPicker: some View {
        VStack(alignment: .leading, spacing: 5) {
            Text(language.localized("‡πÄ‡∏û‡∏®", "Gender")).font(.caption).foregroundColor(.gray)
            Picker("", selection: $gender) {
                ForEach(genderOptions, id: \.self) { option in
                    Text(localizedGender(option)).tag(option)
                }
            }
            .pickerStyle(.segmented)
            .tint(AppColor.brandPrimary.color) // Apply tint
        }
        .padding(.horizontal)
    }
    
    private func localizedGender(_ key: String) -> String {
        switch key {
        case "‡∏ä‡∏≤‡∏¢": return language.localized("‡∏ä‡∏≤‡∏¢", "Male")
        case "‡∏´‡∏ç‡∏¥‡∏á": return language.localized("‡∏´‡∏ç‡∏¥‡∏á", "Female")
        case "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": return language.localized("‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "Other")
        default: return key
        }
    }
    
    // MARK: - Action Functions
    
    func handleRegister() {
        let trimmedEmail = email.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()
        let trimmedPassword = password.trimmingCharacters(in: .whitespacesAndNewlines)
        let trimmedConfirmPassword = confirmPassword.trimmingCharacters(in: .whitespacesAndNewlines)
        
        // Validation (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        guard !trimmedEmail.isEmpty, !trimmedPassword.isEmpty, !trimmedConfirmPassword.isEmpty else {
            alertMessage = language.localized("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (*) ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", "Please fill in all required (*) fields")
            showAlert = true
            return
        }
        guard isValidEmail(trimmedEmail) else {
            alertMessage = language.localized("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "Invalid email format")
            showAlert = true
            return
        }
        guard trimmedPassword == trimmedConfirmPassword else {
            alertMessage = language.localized("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô", "Passwords do not match")
            showAlert = true
            return
        }
        // --- üëá ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ---
        guard isPasswordValid(trimmedPassword) else {
            alertMessage = language.localized(
                "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©",
                "Password must be at least 8 characters long and include uppercase, lowercase, number, and special character."
            )
            showAlert = true
            return
        }
        // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ---
        if memberStore.members.contains(where: { $0.email.lowercased() == trimmedEmail }) {
            alertMessage = language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "This email is already registered")
            showAlert = true
            return
        }
        
        // Create new member (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        let newMember = Member(
            email: trimmedEmail,
            password: hashPassword(trimmedPassword),
            fullName: fullName.trimmingCharacters(in: .whitespacesAndNewlines),
            gender: gender,
            birthdate: birthdate,
            birthTime: birthTime.trimmingCharacters(in: .whitespacesAndNewlines),
            phoneNumber: phoneNumber.trimmingCharacters(in: .whitespacesAndNewlines),
            houseNumber: houseNumber.trimmingCharacters(in: .whitespacesAndNewlines),
            carPlate: carPlate.trimmingCharacters(in: .whitespacesAndNewlines)
        )
        
        // Add member to store (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        memberStore.addMember(newMember) // Assuming addMember handles saving
        // 1. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Email ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        loggedInEmail = newMember.email
        
        // 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Login ‡πÉ‡∏ô FlowManager
        flowManager.isLoggedIn = true
        
        // 3. ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Home ‡πÅ‡∏ó‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Login
        flowManager.navigateTo(.home) // Use navigateTo
        
    }
    
    // Email Validation Helper (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    func isValidEmail(_ email: String) -> Bool {
        let regex = #"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"#
        let predicate = NSPredicate(format: "SELF MATCHES %@", regex)
        return predicate.evaluate(with: email)
    }
    
    // --- üëá ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ---
    func isPasswordValid(_ password: String) -> Bool {
        // 1. ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß
        if password.count < 8 { return false }
        
        // 2. ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß
        let lowercasePredicate = NSPredicate(format: "SELF MATCHES %@", ".*[a-z]+.*")
        if !lowercasePredicate.evaluate(with: password) { return false }
        
        // 3. ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß
        let uppercasePredicate = NSPredicate(format: "SELF MATCHES %@", ".*[A-Z]+.*")
        if !uppercasePredicate.evaluate(with: password) { return false }
        
        // 4. ‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß
        let numberPredicate = NSPredicate(format: "SELF MATCHES %@", ".*[0-9]+.*")
        if !numberPredicate.evaluate(with: password) { return false }
        
        // 5. ‡∏°‡∏µ‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏ï‡∏±‡∏ß (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: !@#$%^&*()-_=+[{]};:'",.<>/?`~)
        // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡∏ä‡∏∏‡∏î‡∏≠‡∏±‡∏Å‡∏Ç‡∏£‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        let specialCharacterPredicate = NSPredicate(format: "SELF MATCHES %@", ".*[!@#$%^&*()\\-_=+\\[{\\]};:'\",.<>/?`~]+.*")
        if !specialCharacterPredicate.evaluate(with: password) { return false }
        
        // ‡∏ú‡πà‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
        return true
    }
    // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ---
    
    // Password Hashing Helper (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    private func hashPassword(_ password: String) -> String {
        guard let data = password.data(using: .utf8) else { return "" }
        let hashed = SHA256.hash(data: data)
        return hashed.compactMap { String(format: "%02x", $0) }.joined()
    }
} // <-- End of RegistrationView

// MARK: - Reusable Input Field Components (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
// ... (‡πÇ‡∏Ñ‡πâ‡∏î InputField, RequiredField, RequiredPasswordField ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ...
// InputField (Normal)
struct InputField: View {
    var title: String
    @Binding var text: String
    
    var body: some View {
        HStack(alignment: .center) {
            Text(title)
                .font(.subheadline)
                .foregroundColor(AppColor.textSecondary.color)
                .frame(width: 110, alignment: .leading)
            
            TextField(title, text: $text)
                .textFieldStyle(PlainTextFieldStyle()) // Use PlainTextFieldStyle for better background control
                .padding(10) // Padding inside the field
                .background(AppColor.backgroundSecondary.color) // Background color for the field
                .cornerRadius(8)
                .tint(AppColor.brandPrimary.color) // Cursor/highlight color
        }
        .padding(.horizontal) // Padding outside the HStack
    }
}

// RequiredField (With asterisk)
struct RequiredField: View {
    var title: String
    @Binding var text: String
    
    var body: some View {
        HStack(alignment: .center) {
            HStack(spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .foregroundColor(AppColor.textSecondary.color)
                Text("*")
                    .foregroundColor(.red)
            }
            .frame(width: 110, alignment: .leading)
            
            TextField(title, text: $text)
                .textFieldStyle(PlainTextFieldStyle())
                .padding(10)
                .background(AppColor.backgroundSecondary.color)
                .cornerRadius(8)
                .tint(AppColor.brandPrimary.color)
        }
        .padding(.horizontal)
    }
}

// RequiredPasswordField (With show/hide button)
struct RequiredPasswordField: View {
    var title: String
    @Binding var text: String
    @State private var showPassword: Bool = false // Local state for visibility
    
    var body: some View {
        HStack(alignment: .center) {
            HStack(spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .foregroundColor(AppColor.textSecondary.color)
                Text("*")
                    .foregroundColor(.red)
            }
            .frame(width: 110, alignment: .leading)
            
            HStack { // HStack for the field and the button
                Group { // Group to switch between SecureField and TextField
                    if showPassword {
                        TextField(title, text: $text)
                    } else {
                        SecureField(title, text: $text)
                    }
                }
                .autocapitalization(.none) // Common modifiers
                .disableAutocorrection(true)
                .textContentType(.oneTimeCode) // Prevent strong password suggestions if not desired
                
                Button(action: { showPassword.toggle() }) {
                    Image(systemName: showPassword ? "eye.slash" : "eye")
                        .foregroundColor(AppColor.textSecondary.color) // Use secondary text color for icon
                }
                .buttonStyle(.plain) // Ensure button doesn't have default styling
            }
            .textFieldStyle(PlainTextFieldStyle()) // Apply style to the inner HStack content
            .padding(10)
            .background(AppColor.backgroundSecondary.color)
            .cornerRadius(8)
            .tint(AppColor.brandPrimary.color)
        }
        .padding(.horizontal)
    }
}


// AppAlert Struct (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
struct AppAlert: Identifiable {
    let id = UUID()
    let title: String
    let message: String
    let confirmAction: (() -> Void)? = nil
}

// Preview Provider (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
#Preview {
    // NavigationView { // Use if needed
    RegistrationView()
        .environmentObject(AppLanguage())
        .environmentObject(MuTeLuFlowManager())
        .environmentObject(MemberStore())
    // }
}
