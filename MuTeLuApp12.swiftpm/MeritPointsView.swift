import SwiftUI

struct MeritPointsView: View {
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    
    // --- vvv ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç vvv ---
    @EnvironmentObject var activityStore: ActivityStore // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ ActivityStore
    // --- ^^^ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ^^^ ---
    
    @AppStorage("loggedInEmail") var loggedInEmail: String = ""
    
    // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô ActivityRecord)
    @State private var userRecords: [ActivityRecord] = []
    
    var dateFormatter: DateFormatter {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        formatter.locale = Locale(identifier: language.currentLanguage == "th" ? "th_TH" : "en_US")
        formatter.calendar = Calendar(identifier: language.currentLanguage == "th" ? .buddhist : .gregorian)
        return formatter
    }
    
    // --- vvv ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç vvv ---
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ï‡πâ‡∏°‡∏ö‡∏∏‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å ActivityStore
    var totalPoints: Int {
        activityStore.totalMeritPoints(for: loggedInEmail)
    }
    // --- ^^^ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ^^^ ---
    
    var body: some View {
        VStack(spacing: 16) {
            BackButton()
            VStack(spacing: 8) {
                Text(language.localized("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ï‡πâ‡∏°‡∏ö‡∏∏‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "Total Merit Points"))
                    .font(.headline)
                
                Text("\(totalPoints) üü£")
                    .font(.system(size: 48, weight: .bold))
                    .foregroundColor(.purple)
            }
            .padding(.top)
            
            if userRecords.isEmpty {
                Spacer()
                Text(language.localized("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ï‡πâ‡∏°‡∏ö‡∏∏‡∏ç", "No merit history yet"))
                    .foregroundColor(.gray)
                Spacer()
            } else {
                List {
                    // --- vvv ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç vvv ---
                    // ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏≤‡∏Å userRecords ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô [ActivityRecord]
                    ForEach(userRecords) { record in
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô activity ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó checkIn ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                        if record.type == .checkIn {
                            VStack(alignment: .leading, spacing: 4) {
                                Text(language.currentLanguage == "th" ? record.placeNameTH : record.placeNameEN)
                                    .font(.headline)
                                Text(dateFormatter.string(from: record.date))
                                    .font(.caption)
                                    .foregroundColor(.gray)
                                // ‡πÉ‡∏ä‡πâ optional unwrap ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö meritPoints
                                if let points = record.meritPoints {
                                    Text("+\(points) \(language.localized("‡πÅ‡∏ï‡πâ‡∏°", "points"))")
                                        .font(.subheadline)
                                        .foregroundColor(.green)
                                }
                            }
                            .padding(.vertical, 6)
                        }
                    }
                    // --- ^^^ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ^^^ ---
                }
            }
        }
        .padding(.top)
        .onAppear {
            // --- vvv ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç vvv ---
            // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ActivityStore
            userRecords = activityStore.checkInRecords(for: loggedInEmail).sorted { $0.date > $1.date }
            // --- ^^^ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ^^^ ---
        }
    }
}
