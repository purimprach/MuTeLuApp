import SwiftUI
import CoreLocation

struct HomeView: View {
    enum HomeTab: Hashable { case home, notifications, history, profile }
    @EnvironmentObject var sacredPlaceViewModel: SacredPlaceViewModel
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    @EnvironmentObject var memberStore: MemberStore
    @EnvironmentObject var locationManager: LocationManager
    @EnvironmentObject var activityStore: ActivityStore 
    @EnvironmentObject var notificationStore: NotificationStore
    
    @AppStorage("loggedInEmail") private var loggedInEmail: String = ""
    
    @State private var selectedTab: HomeTab = .home
    @State private var showBanner = false
    @State private var topILPlaces: [SacredPlace] = [] 
    @State private var nearestWithDistance: [(place: SacredPlace, distance: CLLocationDistance)] = []
    @State private var locationUnavailable = false
    @State private var lastComputedLocation: CLLocation?
    @State private var lastComputeAt: Date = .distantPast
    
    private let minMoveMeters: CLLocationDistance = 50
    private let minInterval: TimeInterval = 6
    
    private var currentMember: Member? {
        memberStore.members.first { $0.email == loggedInEmail }
    }
    
    var body: some View {
        TabView(selection: $selectedTab) {
            MainMenuView(
                showBanner: $showBanner,
                currentMember: flowManager.isGuestMode ? nil : currentMember, // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Guest ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á member
                flowManager: flowManager,
                nearest: nearestWithDistance,
                topRated: topILPlaces, // üëà ‡∏™‡πà‡∏á topILPlaces ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IL ‡πÅ‡∏•‡πâ‡∏ß
                checkProximityToSacredPlaces: checkProximityToSacredPlaces,
                locationManager: locationManager
            )
            .environmentObject(language)
            .environmentObject(flowManager)
            .environmentObject(activityStore)
            .environmentObject(locationManager)
            .overlay(alignment: .top) {
                if locationUnavailable {
                    Text(language.localized("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á", "Location unavailable"))
                        .font(.footnote.weight(.semibold))
                        .padding(.horizontal, 10).padding(.vertical, 6)
                        .background(.red.opacity(0.12))
                        .clipShape(Capsule())
                        .padding(.top, 8)
                        .transition(.move(edge: .top).combined(with: .opacity))
                }
            }
            .tabItem { Label(language.localized("‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", "Home"), systemImage: "house") }
            .tag(HomeTab.home)
            
            NotificationView() // <-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
                .environmentObject(language) // ‡∏™‡πà‡∏á EnvironmentObjects ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                .environmentObject(flowManager)
                .environmentObject(notificationStore) // ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á notificationStore ‡∏î‡πâ‡∏ß‡∏¢
                .environmentObject(sacredPlaceViewModel) // ‡∏™‡πà‡∏á ViewModel ‡∏î‡πâ‡∏ß‡∏¢
                .tabItem { Label(language.localized("‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "Notifications"), systemImage: "bell") }
                .tag(HomeTab.notifications)
            
            // --- Tab ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (History) ---
            HistoryView()
                .environmentObject(language) // ‡∏™‡πà‡∏á EnvironmentObjects ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                .environmentObject(flowManager)
                .environmentObject(activityStore)
                .tabItem { Label(language.localized("‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥", "History"), systemImage: "clock") }
                .tag(HomeTab.history)
            // --- üëá [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Guest ---
                .disabled(flowManager.isGuestMode)
                .opacity(flowManager.isGuestMode ? 0.5 : 1.0) // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏à‡∏≤‡∏á‡∏•‡∏á
            // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ---
            
            // --- Tab ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô (Profile) ---
            NavigationStack { ProfileView() } // ProfileView ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Guest ‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏≠‡∏á
                .environmentObject(language) // ‡∏™‡πà‡∏á EnvironmentObjects ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                .environmentObject(flowManager)
                .environmentObject(memberStore)
                .environmentObject(activityStore) // ProfileView ‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ activityStore ‡∏î‡πâ‡∏ß‡∏¢
                .tabItem { Label(language.localized("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô", "Profile"), systemImage: "person.circle") }
                .tag(HomeTab.profile)
            // --- üëá [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Guest ---
                .disabled(flowManager.isGuestMode)
                .opacity(flowManager.isGuestMode ? 0.5 : 1.0)
        }
        .tint(.purple)
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á
        .task {
            // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IL ‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÜ ‡∏Å‡∏±‡∏ö computeNearest
            await calculateILRankingForHome()
            await debouncedProximityCompute(force: true)
        }
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ location ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (debounce/throttle ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô)
        .task(id: locationManager.userLocation) { // ‡πÉ‡∏ä‡πâ .task(id:)
            await debouncedProximityCompute()
            // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IL ‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ ‡∏ñ‡πâ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• activities ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡πÅ‡∏ï‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ trigger
        }
    }
    
    // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì IL Ranking (‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤)
    private func calculateILRankingForHome() async {
        // --- üëá [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] ‡πÉ‡∏ä‡πâ viewModel.places ---
        // if sacredPlaces.isEmpty { ... } // <--- ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        guard !sacredPlaceViewModel.places.isEmpty else { // <--- ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÅ‡∏ó‡∏ô
            print("‚ö†Ô∏è No sacred places loaded for IL Ranking.")
            return
        }
        
        let nilrRecommender = NILR_Recommender(
            members: memberStore.members,
            places: sacredPlaceViewModel.places,
            activities: activityStore.activities
        )
        let (isf, isp) = nilrRecommender.calculateISFAndISP()
        let ilRanked = nilrRecommender.calculateILRanking(isfScores: isf, ispScores: isp)
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï State ‡∏ö‡∏ô Main Thread
        await MainActor.run {
            self.topILPlaces = Array(ilRanked.prefix(3)) // ‡πÄ‡∏≠‡∏≤ Top 3
            print("üèÜ Top IL Places Updated: \(self.topILPlaces.map { language.currentLanguage == "th" ? $0.nameTH : $0.nameEN })")
        }
    }
    
    
    // MARK: - Public trigger
    func checkProximityToSacredPlaces() {
        Task { await debouncedProximityCompute(force: true) }
    }
    
    // MARK: - Debounce/Throttle wrapper
    private func debouncedProximityCompute(force: Bool = false) async {
        guard let userCL = locationManager.userLocation else {
            await MainActor.run { locationUnavailable = true }
            return
        }
        
        // throttle ‡∏£‡∏∞‡∏¢‡∏∞ + ‡πÄ‡∏ß‡∏•‡∏≤
        if !force {
            if let last = lastComputedLocation,
               userCL.distance(from: last) < minMoveMeters,
               Date().timeIntervalSince(lastComputeAt) < minInterval {
                return
            }
        }
        
        let result = await computeNearest(from: userCL)
        await MainActor.run {
            self.locationUnavailable = false
            self.lastComputedLocation = userCL
            self.lastComputeAt = Date()
            self.nearestWithDistance = result.nearest
            // self.topRatedPlaces = result.topRated // üëà ‡∏•‡∏ö‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ topILPlaces ‡πÅ‡∏ó‡∏ô‡πÅ‡∏•‡πâ‡∏ß
            print("üìç Nearest Places Updated.") // ‡πÄ‡∏û‡∏¥‡πà‡∏° log ‡∏î‡∏π
        }
    }
    
    // MARK: - Core compute returns value (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏ß‡∏°)
    // MARK: - Core compute returns value (‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏á‡πà‡∏≤‡∏¢/‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏£‡∏ß‡∏°)
    private func computeNearest(from userCL: CLLocation) async
    -> (nearest: [(place: SacredPlace, distance: CLLocationDistance)], topRated: [SacredPlace]) {
        guard !sacredPlaceViewModel.places.isEmpty else {
            print("‚ö†Ô∏è No sacred places loaded for Nearest calculation.")
            return (nearest: [], topRated: [])
        }
        let currentPlace = sacredPlaceViewModel.places // ‡πÉ‡∏ä‡πâ viewModel ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß
        let linearRank = currentPlace.map { place in
            (place: place,
             d: userCL.distance(from: CLLocation(latitude: place.latitude,
                                                 longitude: place.longitude)))
        }
        let k = min(8, currentPlace.count)
        let topLinearPlaces = Array(linearRank.sorted { $0.d < $1.d }.prefix(k)).map { $0.place }
        
        // 2) ‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        let routed = await RouteDistanceService.shared.batchDistances(
            from: userCL.coordinate,
            places: topLinearPlaces,
            mode: .driving
        )
        
        // 3) ‡∏Å‡∏£‡∏≠‡∏á‡∏Ñ‡πà‡∏≤ nil + ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
        let nearest3 = routed
            .compactMap { r -> (SacredPlace, CLLocationDistance)? in
                guard let d = r.meters else { return nil }
                return (r.place, d)
            }
            .sorted { $0.1 < $1.1 }
        let nearest = Array(nearest3.prefix(3)).map { (place: $0.0, distance: $0.1) }
    
        let topRated = Array(currentPlace.sorted { $0.rating > $1.rating }.prefix(3))
        
        return (nearest, topRated)
    }
}
 
