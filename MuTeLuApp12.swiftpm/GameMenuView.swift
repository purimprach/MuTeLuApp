import SwiftUI

struct GameMenuView: View {
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    
    var body: some View {
        ZStack {
            // MARK: - 1. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
            LinearGradient(
                colors: [Color.gray.opacity(0.5), .clear],
                startPoint: .top,
                endPoint: .bottom
            )
            .ignoresSafeArea()
            
            VStack(spacing: 20) {
                // MARK: - 2. Header
                HStack {
                    BackButton()
                    Spacer()
                }
                
                Text(language.localized("‡πÄ‡∏Å‡∏°‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°", "Cultural Games"))
                    .font(.title).bold()
                    .multilineTextAlignment(.center)
                    .foregroundStyle(Color.black.gradient)
                
                // MARK: - 3. ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Å‡∏°
                VStack(spacing: 16) {
                    GameCard(
                        title: language.localized("‡∏à‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ö‡∏≤‡∏ï‡∏£", "Offering Game"),
                        icon: "gift.fill",
                        screen: .offeringGame
                    )
                    
                    // --- ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà (Coming Soon) ---
                    GameCard(
                        title: language.localized("‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏®‡∏µ‡∏• 5", "The Five Precepts Quiz"),
                        icon: "questionmark.diamond.fill",
                        screen: .gameQuiz
                    )
                    
                    GameCard(
                        title: language.localized("‡∏ù‡∏∂‡∏Å‡∏™‡∏°‡∏≤‡∏ò‡∏¥ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏•‡∏°‡∏´‡∏≤‡∏¢‡πÉ‡∏à", "Breathing Meditation"),
                        icon: "wind",
                        screen: .gameMeditation
                    )
                    
                    GameCard(
                        title: language.localized("‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏°‡∏á‡∏Ñ‡∏•", "Lucky Symbols Match"),
                        icon: "squares.below.rectangle",
                        screen: .gameMatching
                    )
                }
                
                Spacer()
            }
            .padding()
        }
    }
}


// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// MARK: - [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] Component ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏Å‡∏° (‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
struct GameCard: View {
    @EnvironmentObject var flowManager: MuTeLuFlowManager // üëà ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ flowManager ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    let title: String
    let icon: String
    let screen: MuTeLuScreen
    
    var body: some View {
        Button(action: {
            flowManager.currentScreen = screen // üëà action ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ô‡∏µ‡πâ
        }) {
            HStack(spacing: 16) {
                Image(systemName: icon)
                    .font(.title)
                    .foregroundStyle(Color.blue.gradient)
                    .frame(width: 50)
                
                Text(title)
                    .font(.headline)
                    .foregroundColor(.primary)
                
                Spacer()
                
                Image(systemName: "chevron.right")
                    .foregroundColor(.secondary.opacity(1))
            }
            .padding()
            .background(.ultraThinMaterial)
            .clipShape(RoundedRectangle(cornerRadius: 20, style: .continuous))
            .shadow(color: .black.opacity(0.05), radius: 5, y: 3)
        }
    }
}
