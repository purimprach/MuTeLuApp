import SwiftUI

struct RootWrapperView: View {
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    @EnvironmentObject var activityStore: ActivityStore
    @AppStorage("loggedInEmail") private var loggedInEmail: String = ""
    @EnvironmentObject var sacredPlaceViewModel: SacredPlaceViewModel
    @EnvironmentObject var notificationStore: NotificationStore
    @AppStorage("lastNotificationCheckDate") private var lastNotificationCheckDate: String = ""
    
    var body: some View {
        AppView()
            .onAppear {
                activityStore.loadActivities() // ‡πÇ‡∏´‡∏•‡∏î ActivityStore
                
                if !loggedInEmail.isEmpty {
                    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ email ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ Login ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà Home
                    print("üë§ Found logged-in user: \(loggedInEmail), starting at Home.")
                    flowManager.isLoggedIn = true
                    flowManager.isGuestMode = false // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Guest
                    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞ Stack ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    // (‡∏ñ‡πâ‡∏≤‡∏Ñ‡πà‡∏≤ default ‡πÉ‡∏ô FlowManager ‡∏Ñ‡∏∑‡∏≠ .login ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ)
                    if flowManager.currentScreen != .home { // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤ default ‡πÄ‡∏õ‡πá‡∏ô home ‡πÅ‡∏•‡πâ‡∏ß
                        flowManager.currentScreen = .home
                        flowManager.navigationStack = [.home]
                    }
                } else {
                    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ email ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Login (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default ‡πÉ‡∏´‡∏°‡πà)
                    print("üö™ No logged-in user found, starting at Login.")
                    flowManager.isLoggedIn = false
                    flowManager.isGuestMode = false // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Guest ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà Login ‡∏à‡∏£‡∏¥‡∏á‡πÜ
                    if flowManager.currentScreen != .login {
                        flowManager.currentScreen = .login
                        flowManager.navigationStack = [.login]
                    }
                }
                // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ---
            }
            .preferredColorScheme(language.isDarkMode ? .dark : .light)
    }
    
    // --- vvv ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ vvv ---
    private func checkAndCreateDateNotifications() {
        let today = Calendar.current.startOfDay(for: Date())
        let todayString = ISO8601DateFormatter().string(from: today)
        
        // --- ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ Notification ‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ---
        guard lastNotificationCheckDate != todayString else {
            print("‚ÑπÔ∏è Date notifications already checked today.")
            return // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏ã‡πâ‡∏≥
        }
        print("üîç Checking for Holy Day / Important Day notifications...")
        
        let calendar = Calendar.current
        let tomorrow = calendar.date(byAdding: .day, value: 1, to: today)!
        
        // --- 1. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞ ---
        let holyDays = loadBuddhistDays() // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å BuddhistDayBanner.swift
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ"
        if let nextHolyDay = holyDays.first(where: { calendar.isDate($0, inSameDayAs: tomorrow) }) {
            notificationStore.addNotification(
                type: .holyDayReminder,
                titleTH: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞",
                titleEN: "Holy Day Reminder",
                messageTH: "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ (\(formattedDate(nextHolyDay))) ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞ ‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç ‡∏™‡∏ß‡∏î‡∏°‡∏ô‡∏ï‡πå",
                messageEN: "Tomorrow (\(formattedDate(nextHolyDay))) is a Buddhist Holy Day. Remember to make merit."
            )
        }
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
        if holyDays.contains(where: { calendar.isDate($0, inSameDayAs: today) }) { // <-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
            notificationStore.addNotification(
                type: .holyDayToday,
                titleTH: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏ô‡∏û‡∏£‡∏∞",
                titleEN: "Today is Holy Day",
                messageTH: "‡∏≠‡∏¢‡πà‡∏≤‡∏•‡∏∑‡∏°‡∏ó‡∏≥‡∏ö‡∏∏‡∏ç ‡∏™‡∏ß‡∏î‡∏°‡∏ô‡∏ï‡πå ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°",
                messageEN: "Remember to make merit, pray, or practice mindfulness."
            )
        }
        
        
        // --- 2. ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ---
        let importantDays = loadImportantReligiousDays() // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å ReligiousHolidayBanner.swift
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ"
        if let nextImportantDay = importantDays.first(where: { calendar.isDate($0.date, inSameDayAs: tomorrow) }) {
            notificationStore.addNotification(
                type: .importantDayReminder,
                titleTH: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
                titleEN: "Important Day Reminder",
                messageTH: "‡∏û‡∏£‡∏∏‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô\(language.localized(nextImportantDay.nameTH, nextImportantDay.nameEN))",
                messageEN: "Tomorrow is \(language.localized(nextImportantDay.nameTH, nextImportantDay.nameEN))"
            )
        }
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
        if importantDays.contains(where: { calendar.isDate($0.date, inSameDayAs: today) }) { // <-- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
            // --- ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÉ‡∏ä‡πâ ---
            if let todayImportantDayInfo = importantDays.first(where: { calendar.isDate($0.date, inSameDayAs: today) }) {
                notificationStore.addNotification(
                    type: .importantDayToday,
                    titleTH: "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç",
                    titleEN: "Today is an Important Day",
                    messageTH: "\(language.localized(todayImportantDayInfo.nameTH, todayImportantDayInfo.nameEN))", // <-- ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
                    messageEN: "\(language.localized(todayImportantDayInfo.nameTH, todayImportantDayInfo.nameEN))" // <-- ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
                )
            }
        }
        
        
        // --- ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ Notification ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ---
        lastNotificationCheckDate = todayString
        print("‚úÖ Finished checking date notifications.")
    }
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å Banner ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà)
    private func formattedDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: language.currentLanguage == "th" ? "th_TH" : "en_US")
        formatter.dateStyle = .medium // ‡∏´‡∏£‡∏∑‡∏≠ .short ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πâ‡∏ô‡πÜ
        formatter.timeStyle = .none
        return formatter.string(from: date)
    }
} // End Struct

