import SwiftUI
import CoreLocation

struct SacredPlaceDetailView: View {
    let place: SacredPlace
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager // ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    @EnvironmentObject var locationManager: LocationManager
    @EnvironmentObject var memberStore: MemberStore // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
    @State private var showDetailSheet = false
    @State private var showContactOptions = false
    @State private var showCheckinAlert = false
    
    @EnvironmentObject var activityStore: ActivityStore   // ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    @EnvironmentObject var likeStore: LikeStore           // ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    @EnvironmentObject var bookmarkStore: BookmarkStore     // ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    
    @AppStorage("loggedInEmail") var loggedInEmail: String = ""
    @State private var refreshTrigger = UUID()
    @State private var countdownTimer: Timer?
    @State private var timeRemaining: TimeInterval = 0
    
    var body: some View {
        ScrollView {
            VStack(alignment: .leading, spacing: 16) {
                
                BackButton() // ‡πÉ‡∏ä‡πâ BackButton Component
                
                // MARK: - Header Card (‡∏õ‡∏£‡∏±‡∏ö Action ‡∏õ‡∏∏‡πà‡∏° Like/Bookmark)
                VStack(alignment: .leading, spacing: 10) {
                    HStack(alignment: .top) {
                        Text(language.localized(place.nameTH, place.nameEN))
                            .font(.title2).fontWeight(.bold).multilineTextAlignment(.leading)
                        
                        Spacer()
                        
                        HStack(spacing: 20) {
                            // --- üëá ‡∏õ‡∏∏‡πà‡∏° Bookmark (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Action + Label) ---
                            Button {
                                if flowManager.isGuestMode {
                                    flowManager.requireLogin() // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Login ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Guest
                                } else {
                                    // ‡∏ó‡∏≥ Action ‡∏õ‡∏Å‡∏ï‡∏¥
                                    memberStore.toggleLike(for: loggedInEmail, place: place)
                                    bookmarkStore.toggleBookmark(placeID: place.id.uuidString, for: loggedInEmail)
                                    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á toggle
                                    let nowBookmarked = bookmarkStore.isBookmarked(placeID: place.id.uuidString, by: loggedInEmail)
                                    let activityType: ActivityType = nowBookmarked ? .bookmarked : .unbookmarked
                                    let newActivity = ActivityRecord(
                                        type: activityType,
                                        placeID: place.id.uuidString,
                                        placeNameTH: place.nameTH,
                                        placeNameEN: place.nameEN,
                                        memberEmail: loggedInEmail,
                                        date: Date(),
                                        meritPoints: nil // Bookmark ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πâ‡∏°
                                    )
                                    activityStore.addActivity(newActivity)
                                    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ withAnimation ‡∏Å‡∏±‡∏ö State ‡πÅ‡∏•‡πâ‡∏ß
                                }
                            } label: {
                                // ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Store ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                                let isCurrentlyBookmarked = bookmarkStore.isBookmarked(placeID: place.id.uuidString, by: loggedInEmail)
                                Image(systemName: isCurrentlyBookmarked ? "bookmark.fill" : "bookmark")
                                    .font(.title)
                                    .foregroundColor(isCurrentlyBookmarked ? .blue : .gray)
                                    .scaleEffect(isCurrentlyBookmarked ? 1.2 : 1.0)
                                // ‡πÄ‡∏û‡∏¥‡πà‡∏° Animation ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Icon ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ï‡∏≠‡∏ô State ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                                    .animation(.spring(response: 0.4, dampingFraction: 0.5), value: isCurrentlyBookmarked)
                            }
                            // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Bookmark ---
                            
                            // --- üëá ‡∏õ‡∏∏‡πà‡∏° Like (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Action + Label) ---
                            Button {
                                if flowManager.isGuestMode {
                                    flowManager.requireLogin() // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Login ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Guest
                                } else {
                                    // ‡∏ó‡∏≥ Action ‡∏õ‡∏Å‡∏ï‡∏¥
                                    likeStore.toggleLike(placeID: place.id.uuidString, for: loggedInEmail)
                                    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏á toggle
                                    let nowLiked = likeStore.isLiked(placeID: place.id.uuidString, by: loggedInEmail)
                                    let activityType: ActivityType = nowLiked ? .liked : .unliked
                                    let newActivity = ActivityRecord(
                                        type: activityType,
                                        placeID: place.id.uuidString,
                                        placeNameTH: place.nameTH,
                                        placeNameEN: place.nameEN,
                                        memberEmail: loggedInEmail,
                                        date: Date(),
                                        meritPoints: nil // Like ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ï‡πâ‡∏°
                                    )
                                    activityStore.addActivity(newActivity)
                                    // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ withAnimation ‡∏Å‡∏±‡∏ö State ‡πÅ‡∏•‡πâ‡∏ß
                                }
                            } label: {
                                // ‡∏≠‡πà‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å Store ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                                let isCurrentlyLiked = likeStore.isLiked(placeID: place.id.uuidString, by: loggedInEmail)
                                Image(systemName: isCurrentlyLiked ? "heart.fill" : "heart")
                                    .font(.title)
                                    .foregroundColor(isCurrentlyLiked ? .red : .gray)
                                    .scaleEffect(isCurrentlyLiked ? 1.2 : 1.0)
                                // ‡πÄ‡∏û‡∏¥‡πà‡∏° Animation ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Icon ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ï‡∏≠‡∏ô State ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                                    .animation(.spring(response: 0.4, dampingFraction: 0.5), value: isCurrentlyLiked)
                            }
                            // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î Like ---
                        }
                    }
                    
                    Label(language.currentLanguage == "th" ? place.locationTH : place.locationEN, systemImage: "mappin.and.ellipse")
                        .font(.subheadline).foregroundColor(.secondary)
                }
                .padding().background(.thinMaterial)
                .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                .padding(.horizontal)
                
                // --- ‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
                ExpandableTextView(
                    fullText: language.localized(place.descriptionTH, place.descriptionEN),
                    lineLimit: 5
                )
                .padding()
                .background(Color(.systemGray6))
                .cornerRadius(12)
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.gray.opacity(0.3), lineWidth: 1)
                )
                .padding(.horizontal)
                
                Image(place.imageName)
                    .resizable()
                    .scaledToFit()
                    .frame(maxWidth: .infinity)
                    .cornerRadius(12)
                    .padding(.horizontal)
                
                Button(action: {
                    showDetailSheet.toggle()
                }) {
                    Text(language.localized("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "View Details"))
                        .fontWeight(.bold)
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .padding(.horizontal)
                
                // --- ‡∏™‡πà‡∏ß‡∏ô Map, Directions, Check-in, Contact ---
                VStack(alignment: .leading, spacing: 15) {
                    MapSnapshotView(
                        latitude: place.latitude,
                        longitude: place.longitude,
                        placeName: place.nameTH
                    )
                    .frame(height: 180)
                    .cornerRadius(12)
                    .padding(.horizontal)
                    
                    Button(action: {
                        openInMaps()
                    }) {
                        Label(language.localized("‡∏ô‡∏≥‡∏ó‡∏≤‡∏á", "Get Directions"), systemImage: "map.fill")
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.blue)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }
                    .padding(.horizontal)
                    
                    // --- üëá ‡∏™‡πà‡∏ß‡∏ô Check-in (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Guest) ---
                    VStack {
                        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Check-in ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ Login ‡∏≠‡∏¢‡∏π‡πà ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô Guest ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ
                        let canPotentiallyCheckIn = isUserNearPlace() // ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        let hasCheckedIn = !flowManager.isGuestMode && activityStore.hasCheckedInRecently(email: loggedInEmail, placeID: place.id.uuidString) // Login ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏á Check-in
                        
                        if hasCheckedIn {
                            // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Checked-in + Cooldown (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                            VStack(spacing: 8) {
                                Label(language.localized("‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß", "Checked-in"), systemImage: "checkmark.seal.fill")
                                    .foregroundColor(.green)
                                
                                if timeRemaining > 0 {
                                    Text(language.localized("‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å:", "Next check-in in:"))
                                    Text(formatTime(timeRemaining))
                                        .font(.system(.headline, design: .monospaced).bold())
                                        .foregroundColor(.orange)
                                } else {
                                    Text(language.localized("‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß", "Ready to check-in again"))
                                        .font(.caption)
                                        .foregroundColor(.blue)
                                }
                            }
                            .padding()
                            .frame(maxWidth: .infinity)
                            .background(Color.gray.opacity(0.2))
                            .cornerRadius(12)
                        } else if canPotentiallyCheckIn {
                            // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏û‡∏≠ ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Check-in ‡∏´‡∏£‡∏∑‡∏≠ Cooldown ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
                            if flowManager.isGuestMode {
                                // --- ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° "Login ‡πÄ‡∏û‡∏∑‡πà‡∏≠ Check-in" ---
                                Button {
                                    flowManager.requireLogin() // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Login
                                } label: {
                                    Label(language.localized("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô", "Login to Check-in"), systemImage: "lock.fill")
                                        .foregroundColor(.white)
                                        .padding()
                                        .frame(maxWidth: .infinity)
                                        .background(Color.orange) // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏≠‡∏∑‡πà‡∏ô
                                        .cornerRadius(12)
                                }
                            } else {
                                // --- ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏° Check-in ‡∏õ‡∏Å‡∏ï‡∏¥ ---
                                Button {
                                    // Action Check-in ‡∏õ‡∏Å‡∏ï‡∏¥
                                    let newActivity = ActivityRecord(
                                        type: .checkIn,
                                        placeID: place.id.uuidString,
                                        placeNameTH: place.nameTH,
                                        placeNameEN: place.nameEN,
                                        memberEmail: loggedInEmail,
                                        date: Date(),
                                        meritPoints: 15 // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÅ‡∏ï‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
                                    )
                                    activityStore.addActivity(newActivity)
                                    showCheckinAlert = true
                                    refreshTrigger = UUID() // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ UI ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
                                    startCountdownTimer() // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö Cooldown ‡∏´‡∏•‡∏±‡∏á Check-in ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                                } label: {
                                    Label(language.localized("‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πâ‡∏°", "Check-in to earn points"), systemImage: "checkmark.seal.fill")
                                        .foregroundColor(.white)
                                        .padding()
                                        .frame(maxWidth: .infinity)
                                        .background(Color.green)
                                        .cornerRadius(12)
                                }
                                .alert(isPresented: $showCheckinAlert) {
                                    Alert(
                                        title: Text("‚úÖ \(language.localized("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "Success"))"),
                                        message: Text(language.localized("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏£‡∏±‡∏ö 15 ‡πÅ‡∏ï‡πâ‡∏°", "You have checked in! Received 15 points")),
                                        dismissButton: .default(Text(language.localized("‡∏ï‡∏Å‡∏•‡∏á", "OK")))
                                    )
                                }
                            }
                        } else {
                            // --- ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° "‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏Å‡∏•" ---
                            Text("üìç \(language.localized("‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏Å‡∏•‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ", "You are too far to check-in"))")
                                .foregroundColor(.gray)
                                .padding()
                                .frame(maxWidth: .infinity)
                                .background(Color(.systemGray5))
                                .cornerRadius(12)
                        }
                    }
                    .padding(.horizontal)
                    .id(refreshTrigger) // ‡πÉ‡∏ä‡πâ id ‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠ Trigger refresh
                    // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô Check-in ---
                    
                    // --- ‡∏õ‡∏∏‡πà‡∏° Contact (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
                    Button(action: {
                        showContactOptions = true
                    }) {
                        Text("üìû \(language.localized("‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "Contact Venue"))")
                            .fontWeight(.bold)
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.orange)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                    }
                    .padding(.horizontal)
                    .confirmationDialog(
                        language.localized("‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà", "Contact Venue"),
                        isPresented: $showContactOptions,
                        titleVisibility: .visible
                    ) {
                        Button(language.localized("‡πÇ‡∏ó‡∏£", "Call")) { contactPhone() }
                        Button(language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", "Email")) { contactEmail() }
                        Button(language.localized("‡πÅ‡∏≠‡∏î‡πÑ‡∏•‡∏ô‡πå", "Add LINE")) { openLine() }
                        Button(language.localized("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "Cancel"), role: .cancel) {}
                    }
                }
            } // End of main VStack
            .padding(.top)
            
        } // End of ScrollView
        .sheet(isPresented: $showDetailSheet) {
            DetailSheetView(details: place.details)
                .environmentObject(language)
        }
        .onAppear {
            startCountdownTimer() // ‡πÄ‡∏£‡∏¥‡πà‡∏° Timer ‡πÄ‡∏°‡∏∑‡πà‡∏≠ View ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
        }
        .onDisappear {
            stopCountdownTimer() // ‡∏´‡∏¢‡∏∏‡∏î Timer ‡πÄ‡∏°‡∏∑‡πà‡∏≠ View ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
        }
        // --- üëá [‡πÄ‡∏û‡∏¥‡πà‡∏°] Alert ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Login ---
        .alert(language.localized("‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "Login Required"), isPresented: $flowManager.showLoginPromptAlert) {
            Button(language.localized("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö / ‡∏™‡∏°‡∏±‡∏Ñ‡∏£", "Login / Register")) {
                flowManager.exitGuestMode() // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
            }
            Button(language.localized("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", "Cancel"), role: .cancel) {
                // ‡πÅ‡∏Ñ‡πà‡∏õ‡∏¥‡∏î Alert ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
            }
        } message: {
            Text(language.localized("‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô", "This feature is available for members only. Please log in or register to continue."))
        }
        // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î ---
    } // End of body
    
    // --- Functions (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á) ---
    func isUserNearPlace() -> Bool {
        guard let userLocation = locationManager.userLocation else {
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
            return false
        }
        let placeLocation = CLLocation(latitude: place.latitude, longitude: place.longitude)
        // ‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö 50 km, ‡∏£‡∏∞‡∏¢‡∏∞‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞ 100-500 ‡πÄ‡∏°‡∏ï‡∏£
        return userLocation.distance(from: placeLocation) < 50000 // 50 km for testing
    }
    
    func openInMaps() {
        let latitude = place.latitude
        let longitude = place.longitude
        if let url = URL(string: "http://maps.apple.com/?daddr=\(latitude),\(longitude)&dirflg=d") {
            UIApplication.shared.open(url)
        }
    }
    
    func contactPhone() {
        if let url = URL(string: "tel://022183365"), UIApplication.shared.canOpenURL(url) {
            UIApplication.shared.open(url)
        }
    }
    
    func contactEmail() {
        if let url = URL(string: "mailto:pr@chula.ac.th"), UIApplication.shared.canOpenURL(url) {
            UIApplication.shared.open(url)
        }
    }
    
    func openLine() {
        if let url = URL(string: "https://page.line.me/chulalongkornu"), UIApplication.shared.canOpenURL(url) {
            UIApplication.shared.open(url)
        }
    }
    
    // --- Timer Functions (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢) ---
    func startCountdownTimer() {
        // ‡∏´‡∏¢‡∏∏‡∏î Timer ‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        stopCountdownTimer()
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
        updateTimeRemaining()
        // ‡πÄ‡∏£‡∏¥‡πà‡∏° Timer ‡πÉ‡∏´‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (timeRemaining > 0)
        if timeRemaining > 0 {
            countdownTimer = Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { _ in
                updateTimeRemaining()
            }
        }
    }
    
    func stopCountdownTimer() {
        countdownTimer?.invalidate()
        countdownTimer = nil
    }
    
    func updateTimeRemaining() {
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠ Login ‡∏≠‡∏¢‡∏π‡πà
        if !flowManager.isGuestMode,
           let remaining = activityStore.timeRemainingUntilNextCheckIn(email: loggedInEmail, placeID: place.id.uuidString) {
            timeRemaining = remaining
            if remaining <= 0 && countdownTimer != nil { // ‡∏´‡∏¢‡∏∏‡∏î Timer ‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞ Timer ‡∏¢‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
                stopCountdownTimer()
                refreshTrigger = UUID() // Refresh UI ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏õ‡∏∏‡πà‡∏° Check-in ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
            }
        } else {
            timeRemaining = 0 // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Guest ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ Check-in
            if countdownTimer != nil { // ‡∏´‡∏¢‡∏∏‡∏î Timer ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡∏±‡∏ö‡πÅ‡∏•‡πâ‡∏ß
                stopCountdownTimer()
            }
        }
    }
    
    func formatTime(_ timeInterval: TimeInterval) -> String {
        let hours = Int(timeInterval) / 3600
        let minutes = Int(timeInterval) / 60 % 60
        let seconds = Int(timeInterval) % 60
        return String(format: "%02i:%02i:%02i", hours, minutes, seconds)
    }
} // End of struct

// --- ExpandableTextView (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
struct ExpandableTextView: View {
    let fullText: String
    let lineLimit: Int
    @State private var isExpanded = false
    @EnvironmentObject var language: AppLanguage
    
    var body: some View {
        VStack(alignment: .leading, spacing: 8) {
            Text(fullText)
                .lineLimit(isExpanded ? nil : lineLimit)
                .animation(.easeInOut, value: isExpanded)
            
            Button(action: {
                isExpanded.toggle()
            }) {
                Text(isExpanded ? language.localized("‡πÅ‡∏™‡∏î‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á", "Show Less") : language.localized("‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°", "Read More"))
                    .font(.subheadline)
                    .foregroundColor(.purple)
            }
        }
    }
}
