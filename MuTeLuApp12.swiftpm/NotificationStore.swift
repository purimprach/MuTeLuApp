import Foundation
import SwiftUI // Import SwiftUI ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ @MainActor ‡πÅ‡∏•‡∏∞ ObservableObject

@MainActor // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á @Published ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô Main Thread
class NotificationStore: ObservableObject {
    
    @Published var notifications: [AppNotification] = [] {
        didSet {
            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á notifications array
            saveNotifications()
        }
    }
    
    private let storageKey = "user_notifications_v1" // Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô UserDefaults
    
    init() {
        // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà Store ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
        loadNotifications()
    }
    
    // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Notifications ---
    
    /// ‡πÄ‡∏û‡∏¥‡πà‡∏° Notification ‡πÉ‡∏´‡∏°‡πà (‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á List)
    func addNotification(type: NotificationType, titleTH: String, titleEN: String, messageTH: String, messageEN: String, relatedPlaceID: String? = nil, relatedURL: String? = nil) {
        let newNotification = AppNotification(
            id: UUID(),
            type: type,
            titleTH: titleTH,
            titleEN: titleEN,
            messageTH: messageTH,
            messageEN: messageEN,
            timestamp: Date(), // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            isRead: false,    // Notification ‡πÉ‡∏´‡∏°‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô
            relatedPlaceID: relatedPlaceID,
            relatedURL: relatedURL
        )
        
        // Insert ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà index 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î
        notifications.insert(newNotification, at: 0)
        
        // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Notification ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£, ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 100 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
        // if notifications.count > 100 {
        //     notifications.removeLast(notifications.count - 100)
        // }
        
        print("üîî Added Notification: \(titleTH)")
    }
    
    /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ isRead ‡∏Ç‡∏≠‡∏á Notification
    func markAsRead(notificationId: UUID) {
        if let index = notifications.firstIndex(where: { $0.id == notificationId }) {
            if !notifications[index].isRead { // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡πà‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡πà‡∏≤‡∏ô ‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
                notifications[index].isRead = true
                print("üìñ Marked Notification as Read: \(notifications[index].titleTH)")
            }
        }
    }
    
    /// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ isRead ‡∏Ç‡∏≠‡∏á Notification ‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    func markMultipleAsRead(notificationIds: Set<UUID>) {
        var changed = false
        for index in notifications.indices {
            if notificationIds.contains(notifications[index].id) && !notifications[index].isRead {
                notifications[index].isRead = true
                changed = true
            }
        }
        if changed {
            print("üìñ Marked \(notificationIds.count) Notifications as Read")
        }
    }
    
    
    /// ‡∏•‡∏ö Notification ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    func clearReadNotifications() {
        let initialCount = notifications.count
        notifications.removeAll { $0.isRead }
        let removedCount = initialCount - notifications.count
        if removedCount > 0 {
            print("üóëÔ∏è Cleared \(removedCount) Read Notifications")
        }
    }
    
    /// ‡∏•‡∏ö Notification ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Settings)
    func clearAllNotifications() {
        if !notifications.isEmpty {
            notifications.removeAll()
            print("üóëÔ∏è Cleared All Notifications")
        }
    }
    
    
    // --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
    
    /// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Notifications Array ‡∏•‡∏á UserDefaults
    private func saveNotifications() {
        // ‡πÉ‡∏ä‡πâ JSONEncoder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á Array ‡πÄ‡∏õ‡πá‡∏ô Data
        if let encodedData = try? JSONEncoder().encode(notifications) {
            UserDefaults.standard.set(encodedData, forKey: storageKey)
            // print("üíæ Saved \(notifications.count) notifications.") // Optional: uncomment for debugging
        } else {
            print("‚ùå Error saving notifications.")
        }
    }
    
    /// ‡πÇ‡∏´‡∏•‡∏î Notifications Array ‡∏à‡∏≤‡∏Å UserDefaults
    private func loadNotifications() {
        // ‡πÉ‡∏ä‡πâ JSONDecoder ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á Data ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Array
        if let savedData = UserDefaults.standard.data(forKey: storageKey) {
            if let decodedNotifications = try? JSONDecoder().decode([AppNotification].self, from: savedData) {
                notifications = decodedNotifications
                print("‚úÖ Loaded \(notifications.count) notifications.")
                return // ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
            } else {
                print("‚ö†Ô∏è Error decoding notifications. Data might be corrupted.")
                // ‡∏ñ‡πâ‡∏≤ decode ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏•‡∏≠‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á
                UserDefaults.standard.removeObject(forKey: storageKey)
            }
        }
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠ decode ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏î‡πâ‡∏ß‡∏¢ array ‡∏ß‡πà‡∏≤‡∏á
        notifications = []
        print("‚ÑπÔ∏è No saved notifications found or data corrupted. Starting fresh.")
    }
}
