import SwiftUI
import CoreLocation
import Combine
import MapKit

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// MARK: - Main View: RecommenderForYouView
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
struct RecommenderForYouView: View {
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var flowManager: MuTeLuFlowManager // ‡∏£‡∏±‡∏ö flowManager ‡∏°‡∏≤‡πÉ‡∏ä‡πâ
    @EnvironmentObject private var memberStore: MemberStore
    @EnvironmentObject private var bookmarkStore: BookmarkStore
    @StateObject private var sacredPlaceViewModel = SacredPlaceViewModel() // ‡πÉ‡∏ä‡πâ load ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
    
    @AppStorage("loggedInEmail") private var loggedInEmail: String = ""
    @StateObject private var loc = LocationProvider() // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LocationProvider (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)

    private var activeMember: Member? { 
        guard !flowManager.isGuestMode else { return nil }
        return memberStore.members.first { $0.email.lowercased() == loggedInEmail.lowercased() }
    }
    
    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                // --- Header ---
                BackButton() // ‡∏õ‡∏∏‡πà‡∏° BackButton ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
                HStack {
                    Text(language.localized("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì", "For You"))
                        .font(.title2.bold())
                }
                .padding(.horizontal) // ‡πÉ‡∏ä‡πâ padding(.horizontal) ‡πÅ‡∏ó‡∏ô padding(.horizontal, 16)
                .padding(.top, 8)
                
                // --- Banners (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
                BuddhistDayBanner()
                    .environmentObject(language) // ‡∏™‡πà‡∏á language
                ReligiousHolidayBanner()
                    .environmentObject(language) // ‡∏™‡πà‡∏á language
                
                if !flowManager.isGuestMode {
                    BookmarkedPlacesCard(
                        placesViewModel: sacredPlaceViewModel,
                        bookmarkStore: bookmarkStore,
                        flowManager: flowManager,
                        loggedInEmail: loggedInEmail
                    )
                    .environmentObject(language)
                }
                
                // --- Hero Cards ---
                Group {
                    // Today's Temple Banner
                    TempleBannerCard(
                        headingTH: "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏±‡∏î‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ",
                        headingEN: "Today‚Äôs Temple",
                        memberOverride: nil, // ‡πÉ‡∏ä‡πâ nil ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ getRecommendedTemple ‡πÉ‡∏ä‡πâ Date() ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                        openDetail: {
                            if flowManager.isGuestMode {
                                let temple = getRecommendedTemple(for: nil)
                                if let place = sacredPlaceViewModel.places.first(where: { $0.nameTH == temple.nameTH || $0.nameEN == temple.nameEN }) {
                                    flowManager.navigateTo(.sacredDetail(place: place))
                                }
                            } else {
                                flowManager.navigateTo(.recommendation)
                            }
                        }
                    )
                    .environmentObject(language)
                    .environmentObject(loc) // ‡∏™‡πà‡∏á LocationProvider ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                    
                    if !flowManager.isGuestMode {
                        // Birthday Temple Banner (‡∏ñ‡πâ‡∏≤ Login ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î)
                        if let member = activeMember, let heading = birthdayHeading(for: member) {
                            TempleBannerCard(
                                headingTH: heading.th,
                                headingEN: heading.en,
                                memberOverride: member, // ‡∏™‡πà‡∏á member ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
                                openDetail: {
                                    // Action ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Today's Temple (‡∏ñ‡πâ‡∏≤ Login ‡∏≠‡∏¢‡∏π‡πà)
                                    flowManager.navigateTo(.recommendation)
                                }
                            )
                            .environmentObject(language)
                            .environmentObject(loc)
                        } else if activeMember != nil { // Login ‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô Profile
                            // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
                            MissingBirthdayCard {
                                flowManager.navigateTo(.editProfile)
                            }
                            .environmentObject(language)
                        }
                        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ else ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Guest ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ if !flowManager.isGuestMode ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
                    }
                }
                
                Spacer(minLength: 12) // ‡πÉ‡∏ä‡πâ Spacer ‡πÅ‡∏ó‡∏ô padding(.bottom) ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ú‡∏•
            }
            .padding(.vertical, 12)
        }
        .background(Color(.systemGroupedBackground))
        // Load ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ View ‡∏õ‡∏£‡∏≤‡∏Å‡∏è
        .onAppear {
            if sacredPlaceViewModel.places.isEmpty {
                sacredPlaceViewModel.loadPlaces()
            }
        }
    }
    
    // MARK: - Helpers (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    private func birthdayHeading(for member: Member?) -> (th: String, en: String)? {
        guard let bday = member?.birthdate else { return nil }
        let (th, en) = weekdayName(for: bday)
        return ("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ß‡∏±‡∏ô\(th)", "Recommended Temple for \(en)-born")
    }
    
    private func weekdayName(for date: Date) -> (th: String, en: String) {
        let w = Calendar(identifier: .gregorian).component(.weekday, from: date) // 1=Sun..7=Sat
        let ths = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå","‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå","‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£","‡∏û‡∏∏‡∏ò","‡∏û‡∏§‡∏´‡∏±‡∏™","‡∏®‡∏∏‡∏Å‡∏£‡πå","‡πÄ‡∏™‡∏≤‡∏£‡πå"]
        let ens = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
        let i = max(1, min(7, w)) - 1 // ‡∏õ‡∏£‡∏±‡∏ö index ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (0-6)
        return (ths[i], ens[i])
    }
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// MARK: - Subview: BookmarkedPlacesCard (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç action)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
private struct BookmarkedPlacesCard: View {
    @ObservedObject var placesViewModel: SacredPlaceViewModel
    @ObservedObject var bookmarkStore: BookmarkStore
    var flowManager: MuTeLuFlowManager // ‡∏£‡∏±‡∏ö flowManager ‡∏°‡∏≤‡πÉ‡∏ä‡πâ
    let loggedInEmail: String
    
    @EnvironmentObject var language: AppLanguage
    
    var bookmarkedRecords: [BookmarkRecord] {
        bookmarkStore.getBookmarks(for: loggedInEmail)
    }
    
    var body: some View {
        // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        if !bookmarkedRecords.isEmpty {
            VStack(alignment: .leading, spacing: 10) {
                // --- Header ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î ---
                HStack(spacing: 8) {
                    Image(systemName: "bookmark.fill")
                        .foregroundColor(.blue)
                    Text(language.localized("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ", "Saved Places"))
                    Spacer()
                    Button(language.localized("‡∏î‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", "See All")) {
                        // --- üëá ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1 ---
                        flowManager.navigateTo(.bookmarks) // ‡πÉ‡∏ä‡πâ navigateTo
                        // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                    }
                    .font(.subheadline)
                    .foregroundColor(.purple) // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                }
                .font(.headline) // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Header ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                // .foregroundColor(.secondary) // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ï‡∏≤‡∏° .headline
                
                // --- Horizontal Scroll View ---
                ScrollView(.horizontal, showsIndicators: false) {
                    HStack(spacing: 12) {
                        // ‡πÉ‡∏ä‡πâ prefix(5) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î)
                        ForEach(bookmarkedRecords.prefix(5)) { record in
                            // ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• place ‡∏à‡∏≤‡∏Å viewModel
                            if let place = placesViewModel.places.first(where: { $0.id.uuidString == record.placeID }) {
                                BookmarkItem(place: place)
                                    .onTapGesture {
                                        // --- üëá ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2 ---
                                        flowManager.navigateTo(.sacredDetail(place: place)) // ‡πÉ‡∏ä‡πâ navigateTo
                                        // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                                    }
                                    .environmentObject(language) // ‡∏™‡πà‡∏á language ‡πÉ‡∏´‡πâ item
                            }
                        }
                    }
                    .padding(.vertical, 4) // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                }
            }
            .padding(12)
            .background(RoundedRectangle(cornerRadius: 16, style: .continuous).fill(Color(.secondarySystemBackground)))
            .overlay(RoundedRectangle(cornerRadius: 16, style: .continuous).stroke(Color.primary.opacity(0.06), lineWidth: 1))
            .shadow(color: .black.opacity(0.08), radius: 6, y: 3)
            .padding(.horizontal) // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î
        }
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ else ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏•‡∏¢
    }
}

// MARK: - Subview: BookmarkItem (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢)
private struct BookmarkItem: View {
    let place: SacredPlace
    @EnvironmentObject var language: AppLanguage
    
    var body: some View {
        VStack(alignment: .leading, spacing: 6) { // ‡∏•‡∏î spacing
            Image(uiImage: UIImage(named: place.imageName) ?? UIImage(systemName: "photo")!) // Placeholder
                .resizable()
                .scaledToFill()
                .frame(width: 140, height: 80) // ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                .cornerRadius(10)
                .clipped()
                .foregroundColor(.gray) // ‡∏™‡∏µ placeholder
            
            Text(language.localized(place.nameTH, place.nameEN))
                .font(.caption.bold()) // ‡πÉ‡∏ä‡πâ caption ‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
                .lineLimit(1)
                .frame(width: 140, alignment: .leading) // ‡∏à‡∏±‡∏î‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á .padding(.bottom, 4) ‡∏ñ‡πâ‡∏≤ spacing ‡∏û‡∏≠‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß
        }
    }
}


//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// MARK: - Subviews ‡πÄ‡∏î‡∏¥‡∏° (TempleBannerCard, MissingBirthdayCard, LocationProvider)
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á ‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏ö EnvironmentObject ‡πÄ‡∏û‡∏¥‡πà‡∏°)

private struct TempleBannerCard: View {
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var loc: LocationProvider // ‡πÉ‡∏ä‡πâ loc ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
    var headingTH: String
    var headingEN: String
    var memberOverride: Member?
    var openDetail: () -> Void // action ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
    
    var body: some View {
        // ‡∏´‡∏≤ temple ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡πÉ‡∏ä‡πâ helper function ‡πÄ‡∏î‡∏¥‡∏°)
        let temple = getRecommendedTemple(for: memberOverride)
        
        VStack(alignment: .leading, spacing: 10) {
            // Header (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            HStack(spacing: 8) {
                Image(systemName: "sparkles") // ‡∏´‡∏£‡∏∑‡∏≠ icon ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                Text(language.localized(headingTH, headingEN))
            }
            .font(.headline) // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ Header ‡πÉ‡∏´‡∏ç‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            // .foregroundColor(.secondary) // ‡πÄ‡∏≠‡∏≤‡∏≠‡∏≠‡∏Å
            
            ZStack(alignment: .bottomLeading) {
                bannerImage(named: temple.imageName) // ‡πÉ‡∏ä‡πâ helper ‡πÄ‡∏î‡∏¥‡∏°
                    .frame(maxWidth: .infinity) // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á
                    .frame(height: 180)
                    .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                
                // Gradient overlay (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                LinearGradient(
                    colors: [Color.black.opacity(0.0), Color.black.opacity(0.65)], // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                    startPoint: .center, endPoint: .bottom
                )
                .clipShape(RoundedRectangle(cornerRadius: 16, style: .continuous))
                .allowsHitTesting(false) // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏î
                
                // Text overlay (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                VStack(alignment: .leading, spacing: 6) {
                    Text(language.localized(temple.nameTH, temple.nameEN))
                        .font(.title3.weight(.bold))
                        .foregroundColor(.white)
                        .shadow(radius: 1) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÉ‡∏´‡πâ Text
                    
                    Text(language.localized(temple.descTH, temple.descEN))
                        .font(.footnote)
                        .foregroundColor(.white.opacity(0.95))
                        .lineLimit(2)
                        .shadow(radius: 1) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÉ‡∏´‡πâ Text
                }
                .padding(14)
            }
            .contentShape(RoundedRectangle(cornerRadius: 16, style: .continuous)) // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏î‡πÑ‡∏î‡πâ
            .onTapGesture(perform: openDetail) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å action ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
        }
        .padding(12)
        .background(
            RoundedRectangle(cornerRadius: 16, style: .continuous)
                .fill(Color(.secondarySystemBackground))
        )
        .overlay(
            RoundedRectangle(cornerRadius: 16, style: .continuous)
                .stroke(Color.primary.opacity(0.06), lineWidth: 1)
        )
        .shadow(color: .black.opacity(0.08), radius: 6, y: 3)
        .padding(.horizontal) // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î
    }
    
    // bannerImage helper (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    @ViewBuilder
    private func bannerImage(named: String) -> some View {
        if let uiImage = UIImage(named: named) {
            Image(uiImage: uiImage).resizable().scaledToFill()
        } else {
            ZStack {
                LinearGradient(colors: [.pink, .orange], startPoint: .topLeading, endPoint: .bottomTrailing)
                Image(systemName: "photo.fill").font(.largeTitle).foregroundColor(.white.opacity(0.8)) // ‡πÉ‡∏ä‡πâ photo.fill
            }
            // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á .scaledToFill() ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ZStack ‡∏à‡∏∞‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏° context
        }
    }
    
    // distanceString helper (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) - ‡πÉ‡∏ä‡πâ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
    private func distanceString(to dest: CLLocation?) -> String? {
        guard let destCoord = dest?.coordinate, let hereCoord = loc.lastLocation?.coordinate else { return nil }
        let placeLocation = CLLocation(latitude: destCoord.latitude, longitude: destCoord.longitude)
        let userLocation = CLLocation(latitude: hereCoord.latitude, longitude: hereCoord.longitude)
        let meters = userLocation.distance(from: placeLocation)
        
        let formatter = MKDistanceFormatter()
        formatter.locale = Locale(identifier: language.currentLanguage == "th" ? "th_TH" : "en_US")
        formatter.unitStyle = .abbreviated
        return formatter.string(fromDistance: meters)
    }
}

private struct MissingBirthdayCard: View {
    @EnvironmentObject var language: AppLanguage
    var onEditProfile: () -> Void // action ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
    
    var body: some View {
        VStack(alignment: .leading, spacing: 10) {
            Label {
                Text(language.localized("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", "Birthday not set in profile")) // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
            } icon: {
                Image(systemName: "calendar.badge.exclamationmark")
                    .foregroundColor(.orange) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô
            }
            .font(.headline)
            
            Text(language.localized("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì", "Add your birthday to get personalized temple recommendations based on your birth day.")) // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                .font(.subheadline)
                .foregroundStyle(.secondary)
            
            Button(action: onEditProfile) { // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å action ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
                Text(language.localized("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå", "Go to Edit Profile")) // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏∏‡πà‡∏°
                    .fontWeight(.bold)
                    .frame(maxWidth: .infinity)
                    .padding(.vertical, 10)
                    .background(Color.orange) // ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏™‡πâ‡∏°‡∏•‡πâ‡∏ß‡∏ô ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏î‡∏π‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ .opacity
                    .foregroundColor(.white)
                    .clipShape(RoundedRectangle(cornerRadius: 12, style: .continuous)) // ‡πÉ‡∏ä‡πâ .continuous
            }
            .padding(.top, 5) // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏ö‡∏ô‡∏õ‡∏∏‡πà‡∏°
        }
        .padding()
        .background(Color(.secondarySystemBackground))
        .cornerRadius(16)
        .overlay(RoundedRectangle(cornerRadius: 16, style: .continuous).stroke(Color(.separator), lineWidth: 0.5))
        .shadow(color: .black.opacity(0.08), radius: 6, x: 0, y: 3)
        .padding(.horizontal) // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏ß‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πå‡∏î
    }
}

// LocationProvider (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
final class LocationProvider: NSObject, ObservableObject, CLLocationManagerDelegate {
    @Published var lastLocation: CLLocation?
    private let manager = CLLocationManager()
    
    override init() {
        super.init()
        manager.delegate = self
        manager.desiredAccuracy = kCLLocationAccuracyHundredMeters // ‡∏≠‡∏≤‡∏à‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        manager.requestWhenInUseAuthorization() // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
        // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏° update location ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏≤‡∏° lifecycle ‡∏Ç‡∏≠‡∏á View
        // manager.startUpdatingLocation() // ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏•‡∏∑‡∏≠‡∏á‡πÅ‡∏ö‡∏ï‡∏ñ‡πâ‡∏≤ View ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏•‡∏≠‡∏î
    }
    
    // ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô start/stop updating location
    func startUpdating() {
        manager.requestWhenInUseAuthorization() // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ
        manager.startUpdatingLocation()
    }
    
    func stopUpdating() {
        manager.stopUpdatingLocation()
    }
    
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        // ‡πÉ‡∏ä‡πâ last location ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£
        lastLocation = locations.last // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏á location ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏ô‡πâ‡∏≠‡∏¢‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
        // print("Location updated: \(lastLocation?.coordinate)") // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        print("‚ùå Location manager failed with error: \(error.localizedDescription)")
        // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ UI ‡∏ñ‡πâ‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
    }
    
    func locationManagerDidChangeAuthorization(_ manager: CLLocationManager) {
        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô permission
        switch manager.authorizationStatus {
        case .authorizedWhenInUse, .authorizedAlways:
            print("Location authorized.")
            startUpdating() // ‡πÄ‡∏£‡∏¥‡πà‡∏° update ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï
        case .denied, .restricted:
            print("Location denied or restricted.")
            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡πà‡∏≤‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
            lastLocation = nil // ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏Å‡πà‡∏≤
        case .notDetermined:
            print("Location not determined.")
            manager.requestWhenInUseAuthorization() // ‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        @unknown default:
            fatalError("Unknown location authorization status.")
        }
    }
}

