import SwiftUI

struct HouseNumberView: View {
    @EnvironmentObject var language: AppLanguage
    @State private var houseNumber: String = ""
    @State private var resultTH: String?
    @State private var resultEN: String?
    @State private var goodColor: String = ""
    @State private var badColor: String = ""
    
    var body: some View {
        ScrollView {
            VStack(spacing: 24) {
                // ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö
                BackButton()
                
                // ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠
                Text(language.localized("üè† ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô", "üè† House Number Prediction"))
                    .font(.title2)
                    .fontWeight(.bold)
                
                // ‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô
                TextField(language.localized("‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡πâ‡∏≤‡∏ô", "Enter your house number"), text: $houseNumber)
                    .padding()
                    .background(Color(.systemGray5))
                    .cornerRadius(12)
                    .keyboardType(.numbersAndPunctuation)
                
                // ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
                Button(action: {
                    let sum = calculateHouseNumberSum(houseNumber)
                    let prediction = getHouseNumberPrediction(for: sum)
                    resultTH = prediction.th
                    resultEN = prediction.en
                    goodColor = prediction.goodColor
                    badColor = prediction.badColor
                }) {
                    Text(language.localized("‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", "Predict"))
                        .fontWeight(.bold)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                }
                
                // ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                if let resultTH = resultTH, let resultEN = resultEN {
                    VStack(alignment: .leading, spacing: 12) {
                        Text(language.localized("‡∏ú‡∏•‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢:", "Prediction:"))
                            .font(.headline)
                        
                        VStack(alignment: .leading, spacing: 10) {
                            Text(language.localized(resultTH, resultEN))
                                .font(.body)
                            
                            Divider()
                            
                            Text("‚úÖ \(language.localized("‡∏™‡∏µ‡∏°‡∏á‡∏Ñ‡∏•", "Lucky Color")): \(goodColor)")
                            Text("‚ö†Ô∏è \(language.localized("‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏™‡∏µ", "Avoid Color")): \(badColor)")
                        }
                        .padding()
                        .frame(maxWidth: .infinity)
                        .background(.ultraThinMaterial)
                        .cornerRadius(16)
                        .shadow(radius: 5)
                    }
                }
                
                Spacer()
            }
            .padding()
        }
        .background(Color(.systemGroupedBackground).ignoresSafeArea())
    }
    
    func calculateHouseNumberSum(_ input: String) -> Int {
        let digits = input.filter { $0.isNumber }.compactMap { Int(String($0)) }
        var total = digits.reduce(0, +)
        while total >= 10 {
            total = String(total).compactMap { Int(String($0)) }.reduce(0, +)
        }
        return total
    }
    
    func getHouseNumberPrediction(for number: Int) -> (th: String, en: String, goodColor: String, badColor: String) {
        switch number {
        case 1:
            return ("‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à", "Promotes leadership and confidence", "‡πÅ‡∏î‡∏á", "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°")
        case 2:
            return ("‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô ‡∏ô‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", "Warm and homely, ideal for family life", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô", "‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°")
        case 3:
            return ("‡∏Å‡∏£‡∏∞‡∏ï‡∏∑‡∏≠‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à", "Energetic, great for business owners", "‡∏™‡πâ‡∏°", "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•")
        case 4:
            return ("‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏™‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢", "Good for communication or commerce careers", "‡∏ü‡πâ‡∏≤", "‡∏î‡∏≥")
        case 5:
            return ("‡∏°‡∏±‡πà‡∏ô‡∏Ñ‡∏á ‡∏™‡∏°‡∏î‡∏∏‡∏• ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏û‡∏®‡∏ß‡∏±‡∏¢", "Stable and balanced, suitable for all", "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á", "‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°")
        case 6:
            return ("‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°", "Enhances love and aesthetics", "‡∏ä‡∏°‡∏û‡∏π", "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°")
        case 7:
            return ("‡πÄ‡∏á‡∏µ‡∏¢‡∏ö‡∏™‡∏á‡∏ö ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ò‡∏£‡∏£‡∏°", "Quiet and peaceful, ideal for elderly or spiritual", "‡∏°‡πà‡∏ß‡∏á", "‡∏™‡πâ‡∏°")
        case 8:
            return ("‡πÄ‡∏ô‡πâ‡∏ô‡πÇ‡∏ä‡∏Ñ‡∏•‡∏≤‡∏† ‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô ‡∏≠‡∏≥‡∏ô‡∏≤‡∏à", "Focuses on wealth and power", "‡∏ó‡∏≠‡∏á", "‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô")
        case 9:
            return ("‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏™‡∏¥‡∏£‡∏¥‡∏°‡∏á‡∏Ñ‡∏• ‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏™‡∏π‡∏á‡∏™‡πà‡∏á", "Spiritual and auspicious", "‡∏Ç‡∏≤‡∏ß", "‡∏î‡∏≥")
        default:
            return ("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ", "Unable to predict", "-", "-")
        }
    }
}
