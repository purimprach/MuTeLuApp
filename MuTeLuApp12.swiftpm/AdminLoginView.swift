import SwiftUI

struct AdminLoginView: View {
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    @EnvironmentObject var language: AppLanguage
    
    @State private var username = ""
    @State private var password = ""
    @State private var showPassword = false
    @State private var showError = false
    @State private var errorText = ""
    
    private let correctUsername = "admin"
    private let correctPassword = "123456"
    
    private var canSubmit: Bool {
        !username.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty &&
        !password.isEmpty
    }
    
    var body: some View {
        ZStack {
            LinearGradient(
                colors: [Color.purple.opacity(0.5), Color.blue],
                startPoint: .topLeading,
                endPoint: .bottomTrailing
            )
            .ignoresSafeArea()
            
            VStack(spacing: 20) {
                // üîô ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏á‡πâ‡∏≠ Toolbar)
                HStack {
                    Button {
                        // --- üëá ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2 ---
                        flowManager.navigateTo(.login) // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
                        // ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÉ‡∏ä‡πâ flowManager.navigateBack()
                        // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                    } label: {
                        Label(language.localized("‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö", "Back"), systemImage: "chevron.left")
                    }
                    .buttonStyle(.plain) // ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏™‡πà .buttonStyle ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏ö‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á Gradient
                    .foregroundColor(.white) // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
                    Spacer()
                }
                .padding(.horizontal)
                .padding() // ‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡∏£‡∏≠‡∏ö HStack ‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
                
                Spacer(minLength: 8)
                
                Text(language.localized("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•", "Admin Login"))
                    .font(.title).bold()
                    .foregroundColor(.white) // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
                    .shadow(radius: 2)      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                    .padding()
                
                // ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°
                VStack(spacing: 16) {
                    IconTextField(
                        systemImage: "person.crop.circle.fill",
                        placeholder: language.localized("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", "Username"),
                        text: $username
                    )
                    .textInputAutocapitalization(.never)
                    .keyboardType(.default)
                    
                    IconSecureField(
                        systemImage: "lock.fill",
                        placeholder: language.localized("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "Password"),
                        text: $password,
                        isRevealed: $showPassword
                    )
                    
                    if showError {
                        Text(errorText)
                            .font(.footnote)
                            .foregroundColor(.red)
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding(.horizontal, 4)
                            .transition(.opacity)
                    }
                    
                    Button(action: handleLogin) {
                        Text(language.localized("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "Login"))
                            .fontWeight(.bold)
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(canSubmit ? Color.purple : Color.gray.opacity(0.7))
                            .foregroundColor(.white)
                            .cornerRadius(12)
                            .shadow(color: .black.opacity(0.1), radius: 3, y: 2)
                    }
                    .disabled(!canSubmit)
                    .padding(.top, 6)
                }
                .padding(20)
                .background(.ultraThinMaterial) // ‡πÉ‡∏ä‡πâ Material ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
                .cornerRadius(20)
                .shadow(color: .black.opacity(0.08), radius: 16, y: 8)
                .padding(.horizontal)
                
                Spacer()
                Spacer()
            }
        }
    }
    
    // MARK: - Action
    private func handleLogin() {
        withAnimation { showError = false }
        
        let u = username.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()
        let p = password
        
        guard u == correctUsername.lowercased(), p == correctPassword else {
            errorText = language.localized("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "Incorrect username or password")
            withAnimation { showError = true }
            return
        }
        
        // --- üëá ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 1 ---
        flowManager.navigateTo(.admin) // ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤ Admin
        // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
    }
}

//
// MARK: - Reusable Fields (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
//

// (‡∏™‡πà‡∏ß‡∏ô IconTextField ‡πÅ‡∏•‡∏∞ IconSecureField ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)
// ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ) ...
/// TextField + ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ & ‡∏™‡∏µ‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå)
struct IconTextField: View {
    let systemImage: String
    let placeholder: String
    @Binding var text: String
    
    var body: some View {
        HStack(spacing: 10) {
            Image(systemName: systemImage)
                .foregroundColor(.gray)
                .frame(width: 22)
            
            TextField(placeholder, text: $text)
                .textFieldStyle(.plain)
            // ‡∏à‡∏≤‡∏Å‡πÄ‡∏î‡∏¥‡∏°: .foregroundColor(.primary)
            // ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô:
                .foregroundColor(.black) // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏î‡∏≥‡πÄ‡∏™‡∏°‡∏≠
                .tint(.purple) // ‡∏™‡∏µ‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
                .autocorrectionDisabled(true)
                .textInputAutocapitalization(.never)
        }
        .padding(.vertical, 12)
        .padding(.horizontal, 14)
        .background(Color.white) // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.04), radius: 2, y: 1)
    }
}


/// SecureField + ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô + ‡∏õ‡∏∏‡πà‡∏°‡πÇ‡∏ä‡∏ß‡πå/‡∏ã‡πà‡∏≠‡∏ô (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ & ‡∏™‡∏µ‡πÄ‡∏Ñ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå)
struct IconSecureField: View {
    let systemImage: String
    let placeholder: String
    @Binding var text: String
    @Binding var isRevealed: Bool
    
    var body: some View {
        HStack(spacing: 10) {
            Image(systemName: systemImage)
                .foregroundColor(.gray)
                .frame(width: 22)
            
            if isRevealed {
                TextField(placeholder, text: $text)
                    .textFieldStyle(.plain)
                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 1
                    .foregroundColor(.black) // ‚úÖ
                    .tint(.purple)
                    .autocorrectionDisabled(true)
                    .textInputAutocapitalization(.never)
            } else {
                SecureField(placeholder, text: $text)
                    .textFieldStyle(.plain)
                // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà 2
                    .foregroundColor(.black) // ‚úÖ
                    .tint(.purple)
            }
            
            Button {
                withAnimation(.easeInOut(duration: 0.15)) { isRevealed.toggle() }
            } label: {
                Image(systemName: isRevealed ? "eye.slash" : "eye")
                    .foregroundColor(.gray)
            }
            .accessibilityLabel(isRevealed ? "Hide Password" : "Show Password")
        }
        .padding(.vertical, 12)
        .padding(.horizontal, 14)
        .background(Color.white) // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.04), radius: 2, y: 1)
    }
}
