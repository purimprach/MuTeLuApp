import SwiftUI
import CryptoKit

struct LoginView: View {
    @EnvironmentObject var flowManager: MuTeLuFlowManager
    @EnvironmentObject var language: AppLanguage
    @EnvironmentObject var memberStore: MemberStore
    @AppStorage("loggedInEmail") private var loggedInEmail: String = ""
    @AppStorage("currentUserEmail") var currentUserEmail = "" // ‡πÄ‡∏Å‡πá‡∏ö email ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏ß‡πâ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ
    
    @State private var username = ""
    @State private var password = ""
    
    @State private var showErrorAlert = false
    @State private var errorMessage = ""
    
    @State private var showGreetingPopup = false
    @State private var greetingName = ""
    @State private var randomGreetingMessage = ""
    
    // MARK: Greetings (TH/EN) - (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    let greetingsTH = [
        "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏•‡∏±‡∏á‡∏ö‡∏ß‡∏Å ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å ‡πÜ ‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
        "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏ö‡πÄ‡∏à‡∏≠‡πÅ‡∏ï‡πà‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ ‡∏ó‡∏±‡πâ‡∏á‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡πÉ‡∏´‡∏°‡πà ‡πÜ ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏≥‡∏û‡∏≤‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏î‡∏µ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤",
        "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏≠‡∏î‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏° ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏≠‡∏¢‡∏¢‡∏¥‡πâ‡∏°‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πâ‡∏≤‡∏ß‡∏´‡∏ô‡πâ‡∏≤",
        "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏ó‡∏∏‡πà‡∏°‡πÄ‡∏ó‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏™‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à",
        "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏∞‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏≤‡∏î ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Ñ‡∏≠‡∏¢‡∏≠‡∏≤‡∏à‡∏°‡∏≤‡∏ñ‡∏∂‡∏á‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏¥‡∏î",
        "‡∏ó‡∏∏‡∏Å‡∏¢‡πà‡∏≤‡∏á‡∏Å‡πâ‡∏≤‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç",
        "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏¥‡πà‡∏á‡∏î‡∏µ ‡πÜ ‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏´‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á"
    ]
    let greetingsEN = [
        "May your day be filled with positivity, happiness, and success in every aspect of life.",
        "Wishing you wonderful opportunities and inspiring people who bring good energy into your world.",
        "Today will be an amazing day, filled with smiles, growth, and achievements.",
        "May everything you‚Äôve worked hard for bring you the success you truly deserve.",
        "Unexpected luck and pleasant surprises await you today‚Äîget ready for something wonderful.",
        "May every step you take today be guided by inspiration, joy, and confidence.",
        "Start this day with strength in your heart, and the universe will respond with endless blessings."
    ]
    private var greetingsLocalized: [String] {
        language.currentLanguage == "th" ? greetingsTH : greetingsEN
    }
    
    var body: some View {
        ZStack {
            // Background Gradient (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            LinearGradient(
                gradient: Gradient(colors: [Color.purple.opacity(0.7),
                                            Color(red: 0.1, green: 0, blue: 0.3)]),
                startPoint: .top, endPoint: .bottom
            )
            .ignoresSafeArea()
            
            VStack(spacing: 15) {
                // Language Picker (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                HStack {
                    Spacer()
                    Picker("", selection: $language.currentLanguage) {
                        Text("TH").tag("th")
                        Text("EN").tag("en")
                    }
                    .pickerStyle(.segmented)
                    .frame(width: 120)
                }
                .padding(.top)
                .padding(.trailing)
                
                Spacer()
                
                // Logo and Title (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                Image("LogoMuTeLu") // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ Image ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
                    .resizable().scaledToFill()
                    .frame(width: 130, height: 130)
                    .clipShape(Circle())
                    .overlay(Circle().stroke(.white, lineWidth: 3))
                    .shadow(color: .black.opacity(0.3), radius: 5, x: 2, y: 2)
                
                Text("Mu Te Lu")
                    .font(.system(size: 48, weight: .bold, design: .rounded))
                    .foregroundColor(.white)
                    .shadow(color: .black.opacity(0.3), radius: 3, x: 2, y: 2)
                
                Text(language.localized("‡πÅ‡∏≠‡∏õ‡∏™‡∏≤‡∏¢‡∏°‡∏π‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì", "A spiritual guide for you"))
                    .font(.headline).foregroundColor(.white.opacity(0.85))
                
                // Email Input (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                HStack {
                    Image(systemName: "person.fill")
                        .foregroundColor(.gray)
                    TextField(language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•", "Email"), text: $username)
                        .textFieldStyle(.plain)
                        .keyboardType(.emailAddress)
                        .textInputAutocapitalization(.never)
                        .autocorrectionDisabled(true)
                }
                .padding()
                .background(Color.white)
                .cornerRadius(10)
                .shadow(radius: 1)
                .padding(.horizontal)
                
                // Password Input (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                HStack {
                    Image(systemName: "lock.fill")
                        .foregroundColor(.gray)
                    SecureField(language.localized("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", "Password"), text: $password)
                        .textFieldStyle(.plain)
                }
                .padding()
                .background(Color.white)
                .cornerRadius(10)
                .shadow(radius: 1)
                .padding(.horizontal)
                
                // Login Button (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
                Button(action: handleLogin) {
                    Label(language.localized("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "Login"), systemImage: "arrow.right.circle.fill")
                        .font(.headline)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                }
                .padding(.horizontal)
                .disabled(username.trimmingCharacters(in: .whitespaces).isEmpty ||
                          password.trimmingCharacters(in: .whitespaces).isEmpty)
                
                // Register Button
                Button {
                    // --- üëá ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 2 ---
                    flowManager.navigateTo(.registration) // ‡πÉ‡∏ä‡πâ navigateTo
                    // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                } label: {
                    Text(language.localized("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡∏Å‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà", "Not a member yet? Tap here."))
                        .font(.footnote)
                        .foregroundColor(.white)
                        .underline()
                }
                
                // Admin Login Button
                Button(language.localized("< ‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏• >", "< Admin > Login")) {
                    // --- üëá ‡∏à‡∏∏‡∏î‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà 3 ---
                    flowManager.navigateTo(.adminLogin) // ‡πÉ‡∏ä‡πâ navigateTo
                    // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                }
                .font(.caption)
                .foregroundColor(.white)
                
                Spacer()
            }
            .blur(radius: showGreetingPopup ? 3 : 0) // Blur background when popup shows
            
            // Greeting Popup (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            if showGreetingPopup {
                ZStack {
                    // Dimmed background
                    Color.black.opacity(0.4).ignoresSafeArea()
                        .onTapGesture { // Allow tapping background to dismiss
                            withAnimation { showGreetingPopup = false }
                            // Optionally navigate immediately or wait
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                                flowManager.isLoggedIn = true
                                // No need to navigate here if handleLogin already did
                            }
                        }
                    
                    VStack(spacing: 16) {
                        Text("üéâ").font(.system(size: 50))
                        
                        Text(language.localized("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì\n\(greetingName)", "Hello, \(greetingName)"))
                            .font(.title2).fontWeight(.bold)
                            .multilineTextAlignment(.center)
                        
                        Text(randomGreetingMessage)
                            .font(.body)
                            .foregroundColor(.secondary)
                            .multilineTextAlignment(.center)
                        
                        Button(action: {
                            withAnimation { showGreetingPopup = false }
                            DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
                                flowManager.isLoggedIn = true
                                // Navigation is handled in handleLogin, no need to repeat
                            }
                        }) {
                            Text(language.localized("‡∏ï‡∏Å‡∏•‡∏á", "OK"))
                                .fontWeight(.bold) // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏î‡πà‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
                                .frame(maxWidth: .infinity)
                                .padding()
                                .background(Color.purple)
                                .foregroundColor(.white)
                                .cornerRadius(12)
                        }
                    }
                    .padding(EdgeInsets(top: 30, leading: 20, bottom: 20, trailing: 20)) // Adjust padding
                    .frame(minWidth: 280, maxWidth: 400)
                    .background(.ultraThinMaterial) // Use material for modern look
                    .cornerRadius(25)
                    .shadow(color: .black.opacity(0.2), radius: 20, x: 0, y: 10)
                    .padding() // Padding around the popup
                    .transition(.move(edge: .bottom).combined(with: .opacity))
                    .zIndex(2) // Ensure popup is on top
                }
            }
        }
        .animation(.spring(), value: showGreetingPopup) // Animate popup appearance
        .alert(isPresented: $showErrorAlert) { // Error Alert (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
            Alert(
                title: Text(language.localized("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "Error")),
                message: Text(errorMessage),
                dismissButton: .default(Text(language.localized("‡∏ï‡∏Å‡∏•‡∏á", "OK")))
            )
        }
        // ‡πÄ‡∏ï‡∏¥‡∏° email ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢ login ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        .onAppear {
            if !currentUserEmail.isEmpty && username.isEmpty {
                username = currentUserEmail
            }
        }
    }
    
    // MARK: - Actions
    
    func handleLogin() {
        let trimmedEmail = username.trimmingCharacters(in: .whitespacesAndNewlines).lowercased()
        let trimmedPassword = password.trimmingCharacters(in: .whitespacesAndNewlines)
        
        if let index = memberStore.members.firstIndex(where: { $0.email.lowercased() == trimmedEmail }) {
            let matched = memberStore.members[index]
            
            if matched.password == hashPassword(trimmedPassword) {
                // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• login
                memberStore.recordLogin(email: matched.email) // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô recordLogin ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
                
                // ‡πÄ‡∏Å‡πá‡∏ö email ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                currentUserEmail = matched.email // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï email ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                loggedInEmail = matched.email   // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ email ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                greetingName = matched.fullName
                
                // ‡∏™‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
                randomGreetingMessage = greetingsLocalized.randomElement() ?? ""
                
                // ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
                withAnimation { showGreetingPopup = true }
                flowManager.navigateTo(.home)
                // --- üëÜ ‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                
            } else {
                errorMessage = language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "Incorrect email or password")
                showErrorAlert = true
            }
        } else {
            errorMessage = language.localized("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "Incorrect email or password")
            showErrorAlert = true
        }
    }
    
    // MARK: - Hash (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    private func hashPassword(_ password: String) -> String {
        let data = Data(password.utf8)
        let hashed = SHA256.hash(data: data)
        return hashed.compactMap { String(format: "%02x", $0) }.joined()
    }
}
