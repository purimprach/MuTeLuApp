import SwiftUI

struct ShirtColorView: View {
    @State private var selectedDate = Date()
    @State private var showCalendar = true
    @State private var showResult = false
    @EnvironmentObject var language: AppLanguage
    
    private let allColors = LuckyColourLoader.loadAllColors()
    
    var selectedDay: Int {
        Calendar.current.component(.day, from: selectedDate)
    }
    
    var formattedDate: String {
        let formatter = DateFormatter()
        formatter.locale = Locale(identifier: language.currentLanguage == "th" ? "th_TH" : "en_US")
        formatter.dateStyle = .full
        return formatter.string(from: selectedDate)
    }
    
    var body: some View {
        Spacer()
        BackButton()
        VStack(spacing: 20) {
            Text("üëï " + language.localized(" ‡∏™‡∏µ‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏°‡∏á‡∏Ñ‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô", "Lucky Shirt Color"))
                .font(.title3)
                .padding(.vertical, 12)
                .padding(.horizontal, 20)
                .background(Color(.purple).opacity(0.2))
                .overlay(
                    RoundedRectangle(cornerRadius: 12)
                        .stroke(Color.black.opacity(0.5), lineWidth: 2)
                )
                .cornerRadius(12)
            
            if showCalendar {
                DatePicker("", selection: $selectedDate, displayedComponents: [.date])
                    .datePickerStyle(.graphical)
                    .environment(\.locale, Locale(identifier: language.currentLanguage == "th" ? "th_TH" : "en_US"))
                    .labelsHidden()
                    .padding(.horizontal)
                
                Button(action: {
                    showCalendar = false
                    showResult = true
                }) {
                    Text(language.localized("‡∏î‡∏π‡∏Ñ‡∏≥‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢", "See Prediction"))
                        .fontWeight(.medium)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.purple)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                }
                .padding(.horizontal)
            }
            
            if showResult {
                Text(formattedDate)
                    .font(.headline)
                    .foregroundColor(.gray)
                
                if let color = allColors.first(where: { $0.day == selectedDay }) {
                    VStack(alignment: .leading, spacing: 15) {
                        Divider()
                        ColorRow(label: language.localized("‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á", "Good Luck"), values: color.shouldWear)
                        Divider()
                        ColorRow(label: language.localized("‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏™‡πà", "Avoid"), values: color.shouldAvoid)
                        Divider()
                        ColorRow(label: language.localized("‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÇ‡∏ä‡∏Ñ", "Wealth & Success"), values: color.canWear)
                        Divider()
                    }
                    .padding(.horizontal)
                } else {
                    Text(language.localized("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", "No data for selected day"))
                        .foregroundColor(.red)
                        .font(.footnote)
                }
                
                Button(action: {
                    showCalendar = true
                    showResult = false
                }) {
                    Text(language.localized("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô‡πÜ", "Choose Another Date"))
                        .fontWeight(.medium)
                        .foregroundColor(.white)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.purple)
                        .cornerRadius(12)
                }
                .padding(.horizontal)
                .padding()
            }
            
            Spacer()
        }
        .padding()
    }
}

struct ColorRow: View {
    let label: String
    let values: [String]
    
    var body: some View {
        let shouldUseBlackText: Set<String> = ["‡∏Ç‡∏≤‡∏ß", "‡∏Ñ‡∏£‡∏µ‡∏°", "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô","‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°", "‡πÄ‡∏á‡∏¥‡∏ô", "‡∏ó‡∏≠‡∏á", "‡πÄ‡∏ó‡∏≤","‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô","‡∏™‡πâ‡∏°"]
        
        VStack(alignment: .leading, spacing: 4) {
            Text(label)
                .font(.headline)
            
            HStack(spacing: 10) {
                ForEach(values, id: \.self) { colorName in
                    Text(colorName)
                        .font(.subheadline)
                        .padding(.vertical, 8)
                        .padding(.horizontal, 14)
                        .frame(width:105)
                        .background(colorFromName(colorName))
                        .foregroundColor(shouldUseBlackText.contains(colorName) ? .black : .white)
                        .overlay(
                            RoundedRectangle(cornerRadius: 10)
                                .stroke(Color.gray.opacity(0.9), lineWidth: 2)
                        )
                        .cornerRadius(10)
                }
            }
        }
    }
    
    func colorFromName(_ name: String) -> Color {
        switch name {
        case "‡πÅ‡∏î‡∏á", "‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°": return .red
        case "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô", "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î‡πÉ‡∏™": return .blue
        case "‡∏ü‡πâ‡∏≤": return .cyan
        case "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°": return Color(red: 0.0, green: 0.4, blue: 0.1) 
        case "‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô": return Color(red: 0.5, green: 0.8, blue: 0.2)
        case "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°": return Color(red: 1.0, green: 0.8, blue: 0.0) 
        case "‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô": return Color(red: 1.0, green: 0.9, blue: 0.3) 
        case "‡∏Ñ‡∏£‡∏µ‡∏°": return Color(red: 0.9, green: 0.9, blue: 0.8) 
        case "‡πÄ‡∏ó‡∏≤": return Color(red: 0.7, green: 0.7, blue: 0.7)  
        case "‡πÄ‡∏á‡∏¥‡∏ô": return Color(red: 0.8, green: 0.8, blue: 0.85) 
        case "‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô", "‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°": return .purple
        case "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•": return .brown
        case "‡∏™‡πâ‡∏°": return .orange
        case "‡∏ä‡∏°‡∏û‡∏π": return .pink
        case "‡∏î‡∏≥": return .black
        case "‡∏Ç‡∏≤‡∏ß": return .white
        case "‡∏ó‡∏≠‡∏á": return Color(red: 0.93, green: 0.78, blue: 0.25)
        default: return .gray.opacity(0.3)
        }
    }
}
