import Foundation

// MARK: - Flow Manager (‡∏ï‡∏±‡∏ß‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤)
class MuTeLuFlowManager: ObservableObject {
    @Published var currentScreen: MuTeLuScreen = .login // üëà **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô .login**
    @Published var isLoggedIn: Bool = false
    @Published var isGuestMode: Bool = false
    @Published var navigationStack: [MuTeLuScreen] = [.login] // üëà **‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô .login**
    
    /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (stack)
    func navigateTo(_ screen: MuTeLuScreen) {
        if navigationStack.last != screen {
            navigationStack.append(screen)
        }
        currentScreen = screen
        // --- üëá [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏´‡∏ô‡∏Å‡πá‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Login/Register ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Guest Mode ‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Home) ---
        if screen != .login && screen != .registration && screen != .home {
            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£ navigate ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ Guest Mode ‡πÅ‡∏•‡πâ‡∏ß
            // ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Login ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Login ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            // ‡πÅ‡∏ï‡πà‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á isGuestMode = false ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡∏°‡∏≠‡πÑ‡∏õ
            // ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ isGuestMode ‡πÉ‡∏ô View ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏ó‡∏ô
            // isGuestMode = false // <--- ‡∏•‡∏≠‡∏á comment ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
        }
    }
    
    /// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ (stack)
    func navigateBack() {
        if navigationStack.count > 1 {
            navigationStack.removeLast()
            currentScreen = navigationStack.last ?? (isLoggedIn || isGuestMode ? .home : .login) // üëà ‡∏õ‡∏£‡∏±‡∏ö Default Fallback
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Home (‡∏ñ‡πâ‡∏≤ Login/Guest) ‡∏´‡∏£‡∏∑‡∏≠ Login (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£)
            currentScreen = isLoggedIn || isGuestMode ? .home : .login
        }
    }
    
    // --- üëá [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Guest Mode ---
    func enterGuestMode() {
        isLoggedIn = false // ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ Login
        isGuestMode = true  // ‡πÄ‡∏õ‡πá‡∏ô Guest
        currentScreen = .home // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Home
        navigationStack = [.home] // ‡πÄ‡∏£‡∏¥‡πà‡∏° Stack ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà Home
        print("üë§ Entering Guest Mode.")
    }
    
    // --- üëá [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Guest Mode (‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ Login) ---
    func exitGuestMode() {
        isLoggedIn = false
        isGuestMode = false
        currentScreen = .login
        navigationStack = [.login]
        print("üö™ Exiting Guest Mode.")
    }
    
    // --- üëá [‡πÄ‡∏û‡∏¥‡πà‡∏°] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Login (‡πÄ‡∏°‡∏∑‡πà‡∏≠ Guest ‡∏Å‡∏î‡πÉ‡∏ä‡πâ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î) ---
    func requireLogin() {
        guard isGuestMode else { return } // ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô Guest
        print("üîí Login required. Exiting Guest Mode.")
        exitGuestMode() // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Login
    }
}

// MARK: - Screen Enum (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ)
enum MuTeLuScreen: Equatable {
    case home
    case login
    case registration
    case editProfile
    case recommenderForYou
    case recommendation
    case sacredDetail(place: SacredPlace) // Case ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ô‡∏ö‡∏°‡∏≤ (Associated Value)
    case phoneFortune
    case shirtColor
    case carPlate
    case houseNumber
    case tarot
    case mantra
    case seamSi
    case knowledge
    case wishDetail
    case adminLogin
    case admin
    case gameMenu
    case meritPoints
    case offeringGame
    case bookmarks
    case categorySearch
    // Cases ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    case knowledgeOfferings
    case knowledgeNumbers
    case knowledgeBuddhistPrinciples
    case gameQuiz
    case gameMeditation
    case gameMatching
    
    /// ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö `Equatable`
    static func == (lhs: MuTeLuScreen, rhs: MuTeLuScreen) -> Bool {
        switch (lhs, rhs) {
            // Cases ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ associated value: ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        case (.home, .home), (.login, .login), (.registration, .registration),
            (.editProfile, .editProfile), (.recommenderForYou, .recommenderForYou),
            (.recommendation, .recommendation), (.phoneFortune, .phoneFortune),
            (.shirtColor, .shirtColor), (.carPlate, .carPlate), (.houseNumber, .houseNumber),
            (.tarot, .tarot), (.mantra, .mantra), (.seamSi, .seamSi), (.knowledge, .knowledge),
            (.wishDetail, .wishDetail), (.adminLogin, .adminLogin), (.admin, .admin),
            (.gameMenu, .gameMenu), (.meritPoints, .meritPoints), (.offeringGame, .offeringGame),
            (.bookmarks, .bookmarks), (.categorySearch, .categorySearch),
            // ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö cases ‡πÉ‡∏´‡∏°‡πà
            (.knowledgeOfferings, .knowledgeOfferings), (.knowledgeNumbers, .knowledgeNumbers),
            (.knowledgeBuddhistPrinciples, .knowledgeBuddhistPrinciples), (.gameQuiz, .gameQuiz),
            (.gameMeditation, .gameMeditation), (.gameMatching, .gameMatching):
            return true // ‡∏ñ‡πâ‡∏≤ case ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            
            // Case ‡∏ó‡∏µ‡πà‡∏°‡∏µ associated value (.sacredDetail): ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏à‡∏≤‡∏Å ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
        case let (.sacredDetail(place1), .sacredDetail(place2)):
            // ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡∏ñ‡πâ‡∏≤ ID ‡∏Ç‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
            return place1.id == place2.id
        default:
            return false
        }
    }
}
