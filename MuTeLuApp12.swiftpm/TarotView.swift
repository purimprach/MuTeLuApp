import SwiftUI

// MARK: - 1. Model & Data (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
struct TarotCard {
    let name: String
    let imageName: String
    let description: String
    let topic: String
}

let tarotDeck: [TarotCard] = [
    TarotCard(name: "The Fool", imageName: "figure.walk.motion", description: "‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏°‡πà, ‡∏Å‡∏≤‡∏£‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏ù‡∏±‡∏ô", topic: "‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"),
    TarotCard(name: "The Magician", imageName: "wand.and.stars", description: "‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏≠‡∏ö‡∏î‡πâ‡∏≤‡∏ô", topic: "‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô"),
    TarotCard(name: "The Lovers", imageName: "heart.fill", description: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå, ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", topic: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å"),
    TarotCard(name: "The Star", imageName: "sparkles", description: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏±‡∏á, ‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à, ‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏µ‡∏¢‡∏ß‡∏¢‡∏≤", topic: "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"),
    TarotCard(name: "Death", imageName: "skull", description: "‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà, ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏´‡∏ç‡πà", topic: "‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°"),
    TarotCard(name: "Strength", imageName: "flame.fill", description: "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡πâ‡∏≤‡∏´‡∏≤‡∏ç, ‡∏û‡∏•‡∏±‡∏á‡πÉ‡∏à, ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏ï‡∏ô‡πÄ‡∏≠‡∏á", topic: "‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"),
    TarotCard(name: "Wheel of Fortune", imageName: "circle.dashed", description: "‡πÇ‡∏ä‡∏Ñ‡∏ä‡∏∞‡∏ï‡∏≤, ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á, ‡∏ß‡∏±‡∏è‡∏à‡∏±‡∏Å‡∏£‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï", topic: "‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô")
]


// MARK: - 2. Main View (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
struct TarotView: View {
    @EnvironmentObject var language: AppLanguage
    
    @State private var drawnCards: [TarotCard?] = [nil, nil, nil]
    @State private var isFlipped: [Bool] = [false, false, false]
    @State private var hasDrawn = false
    
    var body: some View {
        ZStack {
            LinearGradient(
                colors: [Color.white.opacity(0.5), Color.black],
                startPoint: .top,
                endPoint: .bottom
            )
            .ignoresSafeArea()
            
            VStack(spacing: 20) {
                Spacer()
                BackButton()
                Spacer()
                VStack {
                    Text("üÉè " + language.localized("‡∏î‡∏π‡∏î‡∏ß‡∏á‡πÑ‡∏û‡πà‡∏ó‡∏≤‡πÇ‡∏£‡πà", "Tarot Reading"))
                        .font(.title).bold()
                        .multilineTextAlignment(.center)
                        .foregroundStyle(.black)
                        .shadow(color: .white.opacity(1), radius: 10, y: 5)
                }
                
                VStack(spacing: 15) {
                    SingleCardView(
                        card: drawnCards[0],
                        isFlipped: $isFlipped[0],
                        topic: getTopic(for: 0),
                        cardSize: CGSize(width: 140, height: 180)
                    )
                    
                    HStack(spacing: 20) {
                        SingleCardView(
                            card: drawnCards[1],
                            isFlipped: $isFlipped[1],
                            topic: getTopic(for: 1),
                            cardSize: CGSize(width: 140, height: 180)
                        )
                        
                        SingleCardView(
                            card: drawnCards[2],
                            isFlipped: $isFlipped[2],
                            topic: getTopic(for: 2),
                            cardSize: CGSize(width: 140, height: 180)
                        )
                    }
                }
                
                Button(action: {
                    drawThreeCards()
                }) {
                    Label(
                        hasDrawn ? language.localized("‡∏î‡∏π‡∏î‡∏ß‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "Draw Again") : language.localized("‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏û‡πà 3 ‡πÉ‡∏ö", "Draw 3 Cards"),
                        systemImage: "wand.and.rays"
                    )
                    .fontWeight(.bold)
                    .foregroundColor(.white)
                    .padding()
                    .frame(maxWidth: 300)
                    .background(hasDrawn ? Color.purple.gradient : Color.indigo.gradient)
                    .cornerRadius(20)
                    .shadow(color: .purple.opacity(0.5), radius: 10, y: 5)
                }
                
                Spacer()
            }
            .padding()
        }
    }
    
    // Functions (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
    func getTopic(for index: Int) -> String {
        switch index {
        case 0: return language.localized("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å", "Love")
        case 1: return language.localized("‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô", "Work")
        case 2: return language.localized("‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "Health")
        default: return ""
        }
    }
    
    func drawThreeCards() {
        if hasDrawn {
            withAnimation {
                isFlipped = [false, false, false]
            }
            hasDrawn = false
            drawnCards = [nil, nil, nil]
        } else {
            drawnCards = Array(tarotDeck.shuffled().prefix(3))
            hasDrawn = true
            
            for i in 0..<3 {
                withAnimation(.linear(duration: 0.4).delay(1 * Double(i))) {
                    isFlipped[i] = true
                }
            }
        }
    }
}


// MARK: - 4. View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏û‡πà 1 ‡πÉ‡∏ö (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
struct SingleCardView: View {
    let card: TarotCard?
    @Binding var isFlipped: Bool
    let topic: String
    let cardSize: CGSize
    
    var body: some View {
        ZStack {
            TarotCardFace(card: card, topic: topic, cardSize: cardSize)
                .opacity(isFlipped ? 1 : 0)
            
            TarotCardBack(cardSize: cardSize)
                .opacity(isFlipped ? 0 : 1)
        }
        .rotation3DEffect(.degrees(isFlipped ? 180 : 0), axis: (x: 0, y: 1, z: 0))
    }
}

// VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV
// MARK: - [‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç] 5. View ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏û‡πà‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏û‡πà

struct TarotCardFace: View {
    let card: TarotCard?
    let topic: String
    let cardSize: CGSize
    
    var body: some View {
        ZStack {
            // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
            RoundedRectangle(cornerRadius: 15, style: .continuous)
                .fill(Color.black.opacity(0.8))
            
            // ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
            VStack(spacing: 10) {
                Text(topic)
                    .font(.subheadline.bold())
                    .foregroundStyle(Color.yellow.gradient)
                
                if let card = card {
                    Image(systemName: card.imageName)
                        .font(.system(size: 40))
                        .foregroundStyle(.white)
                    
                    VStack {
                        Text(card.name.uppercased())
                            .font(.caption.bold())
                        Text(card.description)
                            .font(.footnote)
                            .italic()
                    }
                    .foregroundStyle(.white)
                    .multilineTextAlignment(.center)
                } else {
                    Spacer()
                }
            }
            .padding(5)
        }
        .frame(width: cardSize.width, height: cardSize.height)
        .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))
        .overlay(
            RoundedRectangle(cornerRadius: 15, style: .continuous)
                .stroke(Color.purple.gradient, lineWidth: 5)
        )
        .shadow(color: .white.opacity(0.4), radius: 8, y: 5)
        .rotation3DEffect(.degrees(180), axis: (x: 0, y: 1, z: 0))
    }
}

struct TarotCardBack: View {
    let cardSize: CGSize
    
    var body: some View {
        ZStack {
            // ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
            RoundedRectangle(cornerRadius: 15, style: .continuous)
                .fill(Color.indigo.gradient)
            
            // ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå
            Image(systemName: "sparkle")
                .font(.system(size: 70))
                .foregroundStyle(Color.purple.gradient)
        }
        .frame(width: cardSize.width, height: cardSize.height)
        .clipShape(RoundedRectangle(cornerRadius: 15, style: .continuous))
        .overlay(
            // ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏û‡πà)
            RoundedRectangle(cornerRadius: 15, style: .continuous)
                .stroke(Color.purple.gradient, lineWidth: 5)
        )
        .shadow(color: .black.opacity(1), radius: 8, y: 5)
    }
}
